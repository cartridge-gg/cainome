// Code generated by Cainome. DO NOT EDIT.
// Generated from ABI file.

package abigen

import (
	"context"
	"fmt"
	"math/big"
	"github.com/NethermindEth/juno/core/felt"
	"github.com/NethermindEth/starknet.go/rpc"
	"github.com/cartridge-gg/cainome"
	"github.com/NethermindEth/starknet.go/utils"
)

// TestEnum represents a Cairo enum type
type TestEnum interface {
	IsTestEnum() bool
	MarshalCairo() ([]*felt.Felt, error)
}

const (
	TestEnum_V1 = "V1"
	TestEnum_V2 = "V2"
)

type TestEnumV1 struct {
	Data *felt.Felt `json:"data"`
}

func NewTestEnumV1(data *felt.Felt) TestEnumV1 {
	return TestEnumV1 {Data: data}
}

// IsTestEnum implements the TestEnum interface
func (v TestEnumV1) IsTestEnum() bool {
	return true
}

// MarshalCairo serializes TestEnumV1 to Cairo felt array
func (t *TestEnumV1) MarshalCairo() ([]*felt.Felt, error) {
	var result []*felt.Felt

	// Discriminant for variant
	result = append(result, cainome.FeltFromUint(0))
	result = append(result, t.Data)

	return result, nil
}

// UnmarshalCairo deserializes TestEnumV1 from Cairo felt array
func (t *TestEnumV1) UnmarshalCairo(data []*felt.Felt) error {
	if len(data) == 0 {
		return fmt.Errorf("insufficient data for enum discriminant")
	}

	discriminant := cainome.UintFromFelt(data[0])
	if discriminant != 0 {
		return fmt.Errorf("expected discriminant 0, got %d", discriminant)
	}
	offset := 1

	if offset >= len(data) {
		return fmt.Errorf("insufficient data for variant data")
	}
	t.Data = data[offset]
	offset++
	return nil
}

// CairoSize returns the serialized size for TestEnumV1
func (t *TestEnumV1) CairoSize() int {
	return -1 // Dynamic size
}

type TestEnumV2 struct {}

func NewTestEnumV2() TestEnumV2 {
	return TestEnumV2{}
}

// IsTestEnum implements the TestEnum interface
func (v TestEnumV2) IsTestEnum() bool {
	return true
}

// MarshalCairo serializes TestEnumV2 to Cairo felt array
func (t *TestEnumV2) MarshalCairo() ([]*felt.Felt, error) {
	var result []*felt.Felt

	// Discriminant for variant
	result = append(result, cainome.FeltFromUint(1))
	// Unit variant - no additional data

	return result, nil
}

// UnmarshalCairo deserializes TestEnumV2 from Cairo felt array
func (t *TestEnumV2) UnmarshalCairo(data []*felt.Felt) error {
	if len(data) == 0 {
		return fmt.Errorf("insufficient data for enum discriminant")
	}

	discriminant := cainome.UintFromFelt(data[0])
	if discriminant != 1 {
		return fmt.Errorf("expected discriminant 1, got %d", discriminant)
	}
	offset := 1

	// Unit variant - no additional data to unmarshal
	_ = offset // Suppress unused variable warning
	return nil
}

// CairoSize returns the serialized size for TestEnumV2
func (t *TestEnumV2) CairoSize() int {
	return -1 // Dynamic size
}


// SimpleGetSetEvent represents a contract event
type SimpleGetSetEvent interface {
	IsSimpleGetSetEvent() bool
}


type SimpleGetSet struct {
	contractAddress *felt.Felt
	provider *rpc.Provider
}

func NewSimpleGetSet(contractAddress *felt.Felt, provider *rpc.Provider) *SimpleGetSet {
	return &SimpleGetSet {
		contractAddress: contractAddress,
		provider: provider,
	}
}

func (simple_get_set *SimpleGetSet) GetSetEnum(ctx context.Context, v *TestEnum, opts *cainome.CallOpts) (TestEnum, error) {
	// Setup call options
	if opts == nil {
		opts = &cainome.CallOpts{}
	}
	var blockID rpc.BlockID
	if opts.BlockID != nil {
		blockID = *opts.BlockID
	} else {
		blockID = rpc.BlockID{Tag: "latest"}
	}

	// Serialize parameters to calldata
	calldata := []*felt.Felt{}
	if v_data, err := (*v).MarshalCairo(); err != nil {
		return nil, err
	} else {
		calldata = append(calldata, v_data...)
	}

	// Make the contract call
	functionCall := rpc.FunctionCall{
		ContractAddress:    simple_get_set.contractAddress,
		EntryPointSelector: utils.GetSelectorFromNameFelt("get_set_enum"),
		Calldata:           calldata,
	}

	response, err := simple_get_set.provider.Call(ctx, functionCall, blockID)
	if err != nil {
		return nil, err
	}

	// Deserialize response to proper type
	if len(response) == 0 {
		return nil, fmt.Errorf("empty response")
	}
	if len(response) == 0 {
		return nil, fmt.Errorf("empty response")
	}
	
	// Read discriminant to determine variant
	discriminant := cainome.UintFromFelt(response[0])
	
	switch discriminant {
	case 0:
		var result TestEnumV1
		if err := result.UnmarshalCairo(response); err != nil {
			return nil, fmt.Errorf("failed to unmarshal variant: %w", err)
		}
		return &result, nil
	case 1:
		var result TestEnumV2
		if err := result.UnmarshalCairo(response); err != nil {
			return nil, fmt.Errorf("failed to unmarshal variant: %w", err)
		}
		return &result, nil
	default:
		return nil, fmt.Errorf("unknown enum discriminant: %d", discriminant)
	}
}

func (simple_get_set *SimpleGetSet) GetA(ctx context.Context, opts *cainome.CallOpts) (*felt.Felt, error) {
	// Setup call options
	if opts == nil {
		opts = &cainome.CallOpts{}
	}
	var blockID rpc.BlockID
	if opts.BlockID != nil {
		blockID = *opts.BlockID
	} else {
		blockID = rpc.BlockID{Tag: "latest"}
	}

	// No parameters required
	calldata := []*felt.Felt{}

	// Make the contract call
	functionCall := rpc.FunctionCall{
		ContractAddress:    simple_get_set.contractAddress,
		EntryPointSelector: utils.GetSelectorFromNameFelt("get_a"),
		Calldata:           calldata,
	}

	response, err := simple_get_set.provider.Call(ctx, functionCall, blockID)
	if err != nil {
		return nil, err
	}

	// Deserialize response to proper type
	if len(response) == 0 {
		return nil, fmt.Errorf("empty response")
	}
	return response[0], nil
}

func (simple_get_set *SimpleGetSet) SetA(ctx context.Context, a *felt.Felt) error {
	// Serialize parameters to calldata
	calldata := []*felt.Felt{}
	calldata = append(calldata, a)

	// TODO: Implement invoke transaction
	// This requires account/signer setup for transaction submission
	_ = calldata
	return fmt.Errorf("invoke methods require account setup - not yet implemented")
}

func (simple_get_set *SimpleGetSet) GetB(ctx context.Context, opts *cainome.CallOpts) (*big.Int, error) {
	// Setup call options
	if opts == nil {
		opts = &cainome.CallOpts{}
	}
	var blockID rpc.BlockID
	if opts.BlockID != nil {
		blockID = *opts.BlockID
	} else {
		blockID = rpc.BlockID{Tag: "latest"}
	}

	// No parameters required
	calldata := []*felt.Felt{}

	// Make the contract call
	functionCall := rpc.FunctionCall{
		ContractAddress:    simple_get_set.contractAddress,
		EntryPointSelector: utils.GetSelectorFromNameFelt("get_b"),
		Calldata:           calldata,
	}

	response, err := simple_get_set.provider.Call(ctx, functionCall, blockID)
	if err != nil {
		return nil, err
	}

	// Deserialize response to proper type
	if len(response) == 0 {
		return nil, fmt.Errorf("empty response")
	}
	var result *big.Int
	// TODO: Convert felt to Composite(Composite { type_path: "core::integer::u256", inners: [CompositeInner { index: 0, name: "low", kind: NotUsed, token: CoreBasic(CoreBasic { type_path: "core::integer::u128" }) }, CompositeInner { index: 1, name: "high", kind: NotUsed, token: CoreBasic(CoreBasic { type_path: "core::integer::u128" }) }], generic_args: [], type: Struct, is_event: false, alias: None })
	_ = response
	return result, nil
}

func (simple_get_set *SimpleGetSet) SetB(ctx context.Context, b *big.Int) error {
	// Serialize parameters to calldata
	calldata := []*felt.Felt{}
	calldata = append(calldata, cainome.FeltFromBigInt(b))

	// TODO: Implement invoke transaction
	// This requires account/signer setup for transaction submission
	_ = calldata
	return fmt.Errorf("invoke methods require account setup - not yet implemented")
}

func (simple_get_set *SimpleGetSet) SetArray(ctx context.Context, data []*felt.Felt) error {
	// Serialize parameters to calldata
	calldata := []*felt.Felt{}
	if data_data, err := cainome.NewCairoFeltArray(data).MarshalCairo(); err != nil {
		return fmt.Errorf("failed to marshal data: %w", err)
	} else {
		calldata = append(calldata, data_data...)
	}

	// TODO: Implement invoke transaction
	// This requires account/signer setup for transaction submission
	_ = calldata
	return fmt.Errorf("invoke methods require account setup - not yet implemented")
}

func (simple_get_set *SimpleGetSet) GetArray(ctx context.Context, opts *cainome.CallOpts) ([]*felt.Felt, error) {
	// Setup call options
	if opts == nil {
		opts = &cainome.CallOpts{}
	}
	var blockID rpc.BlockID
	if opts.BlockID != nil {
		blockID = *opts.BlockID
	} else {
		blockID = rpc.BlockID{Tag: "latest"}
	}

	// No parameters required
	calldata := []*felt.Felt{}

	// Make the contract call
	functionCall := rpc.FunctionCall{
		ContractAddress:    simple_get_set.contractAddress,
		EntryPointSelector: utils.GetSelectorFromNameFelt("get_array"),
		Calldata:           calldata,
	}

	response, err := simple_get_set.provider.Call(ctx, functionCall, blockID)
	if err != nil {
		return nil, err
	}

	// Deserialize response to proper type
	if len(response) == 0 {
		return nil, fmt.Errorf("empty response")
	}
	var result []*felt.Felt
	// TODO: Convert felt to Array(Array { type_path: "core::array::Span::<core::felt252>", inner: CoreBasic(CoreBasic { type_path: "core::felt252" }), is_legacy: false })
	_ = response
	return result, nil
}

