// Code generated by Cainome. DO NOT EDIT.
// Generated from ABI file.

package abigen

import (
	"context"
	"fmt"
	"math/big"
	"github.com/NethermindEth/juno/core/felt"
	"github.com/NethermindEth/starknet.go/rpc"
	"github.com/NethermindEth/starknet.go/utils"
)

// SimpleGetSetEvent represents a contract event
type SimpleGetSetEvent interface {
	IsSimpleGetSetEvent() bool
}


type TestEnum struct {
	Variant string `json:"variant"`
	Value   interface{} `json:"value,omitempty"`
}

const (
	TestEnum_V1 = "V1"
	TestEnum_V2 = "V2"
)

func NewTestEnumV1() TestEnum {
	return TestEnum {
		Variant: "V1",
	}
}

func NewTestEnumV2() TestEnum {
	return TestEnum {
		Variant: "V2",
	}
}

// MarshalCairo serializes TestEnum to Cairo felt array
func (e *TestEnum) MarshalCairo() ([]*felt.Felt, error) {
	var result []*felt.Felt

	switch e.Variant {
	case "V1":
		// Discriminant for variant V1
		result = append(result, FeltFromUint(0))
		// Unit variant - no additional data
	case "V2":
		// Discriminant for variant V2
		result = append(result, FeltFromUint(1))
		// Unit variant - no additional data
	default:
		return nil, fmt.Errorf("unknown variant: %s", e.Variant)
	}

	return result, nil
}

// UnmarshalCairo deserializes TestEnum from Cairo felt array
func (e *TestEnum) UnmarshalCairo(data []*felt.Felt) error {
	if len(data) == 0 {
		return fmt.Errorf("insufficient data for enum discriminant")
	}

	discriminant := UintFromFelt(data[0])
	offset := 1

	switch discriminant {
	case 0:
		e.Variant = "V1"
		e.Value = nil
	case 1:
		e.Variant = "V2"
		e.Value = nil
	default:
		return fmt.Errorf("unknown discriminant: %d", discriminant)
	}

	_ = offset // Suppress unused variable warning for unit-only enums
	return nil
}

// CairoSize returns the serialized size for TestEnum
func (e *TestEnum) CairoSize() int {
	return -1 // Dynamic size
}


type SimpleGetSet struct {
	contractAddress *felt.Felt
	provider *rpc.Provider
}

func NewSimpleGetSet(contractAddress *felt.Felt, provider *rpc.Provider) *SimpleGetSet {
	return &SimpleGetSet {
		contractAddress: contractAddress,
		provider: provider,
	}
}

func (simple_get_set *SimpleGetSet) GetSetEnum(ctx context.Context, v *TestEnum, opts *CallOpts) (TestEnum, error) {
	// Setup call options
	if opts == nil {
		opts = &CallOpts{}
	}
	var blockID rpc.BlockID
	if opts.BlockID != nil {
		blockID = *opts.BlockID
	} else {
		blockID = rpc.BlockID{Tag: "latest"}
	}

	// Serialize parameters to calldata
	calldata := []*felt.Felt{}
	// TODO: Serialize complex type v using MarshalCairo()
	// if v_data, err := v.MarshalCairo(); err != nil {
	//     return TestEnum{}, fmt.Errorf("failed to marshal v: %w", err)
	// } else {
	//     calldata = append(calldata, v_data...)
	// }
	_ = v // TODO: implement MarshalCairo and add to calldata

	// Make the contract call
	functionCall := rpc.FunctionCall{
		ContractAddress:    simple_get_set.contractAddress,
		EntryPointSelector: utils.GetSelectorFromNameFelt("get_set_enum"),
		Calldata:           calldata,
	}

	response, err := simple_get_set.provider.Call(ctx, functionCall, blockID)
	if err != nil {
		return TestEnum{}, err
	}

	// Deserialize response to proper type
	if len(response) == 0 {
		return TestEnum{}, fmt.Errorf("empty response")
	}
	var result TestEnum
	// TODO: Deserialize using UnmarshalCairo()
	// if err := result.UnmarshalCairo(response); err != nil {
	//     return TestEnum{}, fmt.Errorf("failed to unmarshal response: %w", err)
	// }
	_ = response // TODO: implement UnmarshalCairo and deserialize response into result
	return result, nil
}

func (simple_get_set *SimpleGetSet) GetA(ctx context.Context, opts *CallOpts) (*felt.Felt, error) {
	// Setup call options
	if opts == nil {
		opts = &CallOpts{}
	}
	var blockID rpc.BlockID
	if opts.BlockID != nil {
		blockID = *opts.BlockID
	} else {
		blockID = rpc.BlockID{Tag: "latest"}
	}

	// No parameters required
	calldata := []*felt.Felt{}

	// Make the contract call
	functionCall := rpc.FunctionCall{
		ContractAddress:    simple_get_set.contractAddress,
		EntryPointSelector: utils.GetSelectorFromNameFelt("get_a"),
		Calldata:           calldata,
	}

	response, err := simple_get_set.provider.Call(ctx, functionCall, blockID)
	if err != nil {
		return nil, err
	}

	// Deserialize response to proper type
	if len(response) == 0 {
		return nil, fmt.Errorf("empty response")
	}
	return response[0], nil
}

func (simple_get_set *SimpleGetSet) SetA(ctx context.Context, a *felt.Felt) error {
	// Serialize parameters to calldata
	calldata := []*felt.Felt{}
	// TODO: Serialize basic type a to felt
	_ = a // TODO: add to calldata

	// TODO: Implement invoke transaction
	// This requires account/signer setup for transaction submission
	_ = calldata
	return fmt.Errorf("invoke methods require account setup - not yet implemented")
}

func (simple_get_set *SimpleGetSet) GetB(ctx context.Context, opts *CallOpts) (*big.Int, error) {
	// Setup call options
	if opts == nil {
		opts = &CallOpts{}
	}
	var blockID rpc.BlockID
	if opts.BlockID != nil {
		blockID = *opts.BlockID
	} else {
		blockID = rpc.BlockID{Tag: "latest"}
	}

	// No parameters required
	calldata := []*felt.Felt{}

	// Make the contract call
	functionCall := rpc.FunctionCall{
		ContractAddress:    simple_get_set.contractAddress,
		EntryPointSelector: utils.GetSelectorFromNameFelt("get_b"),
		Calldata:           calldata,
	}

	response, err := simple_get_set.provider.Call(ctx, functionCall, blockID)
	if err != nil {
		return nil, err
	}

	// Deserialize response to proper type
	if len(response) == 0 {
		return nil, fmt.Errorf("empty response")
	}
	var result *big.Int
	// TODO: Convert felt to basic type
	_ = response // TODO: deserialize response into result
	return result, nil
}

func (simple_get_set *SimpleGetSet) SetB(ctx context.Context, b *big.Int) error {
	// Serialize parameters to calldata
	calldata := []*felt.Felt{}
	// TODO: Serialize basic type b to felt
	_ = b // TODO: add to calldata

	// TODO: Implement invoke transaction
	// This requires account/signer setup for transaction submission
	_ = calldata
	return fmt.Errorf("invoke methods require account setup - not yet implemented")
}

func (simple_get_set *SimpleGetSet) SetArray(ctx context.Context, data []*felt.Felt) error {
	// Serialize parameters to calldata
	calldata := []*felt.Felt{}
	// TODO: Serialize basic type data to felt
	_ = data // TODO: add to calldata

	// TODO: Implement invoke transaction
	// This requires account/signer setup for transaction submission
	_ = calldata
	return fmt.Errorf("invoke methods require account setup - not yet implemented")
}

func (simple_get_set *SimpleGetSet) GetArray(ctx context.Context, opts *CallOpts) ([]*felt.Felt, error) {
	// Setup call options
	if opts == nil {
		opts = &CallOpts{}
	}
	var blockID rpc.BlockID
	if opts.BlockID != nil {
		blockID = *opts.BlockID
	} else {
		blockID = rpc.BlockID{Tag: "latest"}
	}

	// No parameters required
	calldata := []*felt.Felt{}

	// Make the contract call
	functionCall := rpc.FunctionCall{
		ContractAddress:    simple_get_set.contractAddress,
		EntryPointSelector: utils.GetSelectorFromNameFelt("get_array"),
		Calldata:           calldata,
	}

	response, err := simple_get_set.provider.Call(ctx, functionCall, blockID)
	if err != nil {
		return nil, err
	}

	// Deserialize response to proper type
	if len(response) == 0 {
		return nil, fmt.Errorf("empty response")
	}
	var result []*felt.Felt
	// TODO: Convert felt to basic type
	_ = response // TODO: deserialize response into result
	return result, nil
}

