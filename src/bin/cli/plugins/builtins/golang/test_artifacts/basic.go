// Code generated by Cainome. DO NOT EDIT.
// Generated from ABI file.

package abigen

import (
	"context"
	"fmt"
	"github.com/NethermindEth/juno/core/felt"
	"github.com/NethermindEth/starknet.go/rpc"
	"github.com/NethermindEth/starknet.go/account"
	"github.com/cartridge-gg/cainome"
	"math/big"
	"github.com/NethermindEth/starknet.go/utils"
)

// BasicEvent represents a contract event
type BasicEvent interface {
	IsBasicEvent() bool
}


type BasicReader struct {
	contractAddress *felt.Felt
	provider rpc.RpcProvider
}

type BasicWriter struct {
	contractAddress *felt.Felt
	account *account.Account
}

type Basic struct {
	*BasicReader
	*BasicWriter
}

func NewBasicReader(contractAddress *felt.Felt, provider rpc.RpcProvider) *BasicReader {
	return &BasicReader {
		contractAddress: contractAddress,
		provider: provider,
	}
}

func NewBasicWriter(contractAddress *felt.Felt, account *account.Account) *BasicWriter {
	return &BasicWriter {
		contractAddress: contractAddress,
		account: account,
	}
}

func NewBasic(contractAddress *felt.Felt, account *account.Account) *Basic {
	return &Basic {
		BasicReader: NewBasicReader(contractAddress, account.Provider),
		BasicWriter: NewBasicWriter(contractAddress, account),
	}
}

func (basic_writer *BasicWriter) SetStorage(ctx context.Context, v_1 *felt.Felt, v_2 *big.Int, opts *cainome.InvokeOpts) (*felt.Felt, error) {
	// Setup invoke options
	if opts == nil {
		opts = &cainome.InvokeOpts{}
	}

	// Serialize parameters to calldata
	calldata := []*felt.Felt{}
	calldata = append(calldata, v_1)
	calldata = append(calldata, cainome.FeltFromBigInt(v_2))

	// Build and send invoke transaction using cainome helper
	txHash, err := cainome.BuildAndSendInvokeTxn(ctx, basic_writer.account, basic_writer.contractAddress, utils.GetSelectorFromNameFelt("set_storage"), calldata, opts)
	if err != nil {
		return nil, fmt.Errorf("failed to submit invoke transaction: %w", err)
	}

	return txHash, nil
}

func (basic_reader *BasicReader) ReadStorageTuple(ctx context.Context, opts *cainome.CallOpts) (struct {
	Field0 *felt.Felt
	Field1 *big.Int
}, error) {
	// Setup call options
	if opts == nil {
		opts = &cainome.CallOpts{}
	}
	var blockID rpc.BlockID
	if opts.BlockID != nil {
		blockID = *opts.BlockID
	} else {
		blockID = rpc.BlockID{Tag: "latest"}
	}

	// No parameters required
	calldata := []*felt.Felt{}

	// Make the contract call
	functionCall := rpc.FunctionCall{
		ContractAddress:    basic_reader.contractAddress,
		EntryPointSelector: utils.GetSelectorFromNameFelt("read_storage_tuple"),
		Calldata:           calldata,
	}

	response, err := basic_reader.provider.Call(ctx, functionCall, blockID)
	if err != nil {
		return struct {
	Field0 *felt.Felt
	Field1 *big.Int
}{}, err
	}

	// Deserialize response to proper type
	if len(response) == 0 {
		return struct {
	Field0 *felt.Felt
	Field1 *big.Int
}{}, fmt.Errorf("empty response")
	}
	var result struct {
	Field0 *felt.Felt
	Field1 *big.Int
}
	offset := 0

	if offset >= len(response) {
		return struct {
	Field0 *felt.Felt
	Field1 *big.Int
}{}, fmt.Errorf("insufficient data for tuple field 0")
	}
	result.Field0 = response[offset]
	offset++

	if offset >= len(response) {
		return struct {
	Field0 *felt.Felt
	Field1 *big.Int
}{}, fmt.Errorf("insufficient data for tuple field 1")
	}
	result.Field1 = cainome.BigIntFromFelt(response[offset])
	offset++

	return result, nil
}

