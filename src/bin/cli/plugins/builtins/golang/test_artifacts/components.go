// Code generated by Cainome. DO NOT EDIT.
// Generated from ABI file.

package abigen

import (
	"context"
	"fmt"
	"github.com/NethermindEth/juno/core/felt"
	"github.com/NethermindEth/starknet.go/account"
	"github.com/NethermindEth/starknet.go/rpc"
	"github.com/NethermindEth/starknet.go/utils"
	"github.com/cartridge-gg/cainome"
	"math/big"
)

type ComponentsOutterEvent struct {
}

// MarshalCairo serializes ComponentsOutterEvent to Cairo felt array
func (s *ComponentsOutterEvent) MarshalCairo() ([]*felt.Felt, error) {
	var result []*felt.Felt

	return result, nil
}

// UnmarshalCairo deserializes ComponentsOutterEvent from Cairo felt array
func (s *ComponentsOutterEvent) UnmarshalCairo(data []*felt.Felt) error {
	return nil
}

// CairoSize returns the serialized size for ComponentsOutterEvent
func (s *ComponentsOutterEvent) CairoSize() int {
	return -1 // Dynamic size
}


// EventName returns the name of this event type
func (e ComponentsOutterEvent) EventName() string {
	return "components_outter"
}

// IsComponentsComponentsContractEvent implements the ComponentsComponentsContractEvent interface
func (e ComponentsOutterEvent) IsComponentsComponentsContractEvent() bool {
	return true
}


type ComponentsMyStructSimple struct {
	A *felt.Felt `json:"a"`
	B *felt.Felt `json:"b"`
}

// MarshalCairo serializes ComponentsMyStructSimple to Cairo felt array
func (s *ComponentsMyStructSimple) MarshalCairo() ([]*felt.Felt, error) {
	var result []*felt.Felt

	result = append(result, s.A)
	result = append(result, s.B)
	return result, nil
}

// UnmarshalCairo deserializes ComponentsMyStructSimple from Cairo felt array
func (s *ComponentsMyStructSimple) UnmarshalCairo(data []*felt.Felt) error {
	offset := 0

	if offset >= len(data) {
		return fmt.Errorf("insufficient data for field A")
	}
	s.A = data[offset]
	offset++

	if offset >= len(data) {
		return fmt.Errorf("insufficient data for field B")
	}
	s.B = data[offset]
	offset++

	return nil
}

// CairoSize returns the serialized size for ComponentsMyStructSimple
func (s *ComponentsMyStructSimple) CairoSize() int {
	return -1 // Dynamic size
}


type ComponentsSimpleWritten struct {
	After *felt.Felt `json:"after"`
	Before *felt.Felt `json:"before"`
}

// MarshalCairo serializes ComponentsSimpleWritten to Cairo felt array
func (s *ComponentsSimpleWritten) MarshalCairo() ([]*felt.Felt, error) {
	var result []*felt.Felt

	result = append(result, s.After)
	result = append(result, s.Before)
	return result, nil
}

// UnmarshalCairo deserializes ComponentsSimpleWritten from Cairo felt array
func (s *ComponentsSimpleWritten) UnmarshalCairo(data []*felt.Felt) error {
	offset := 0

	if offset >= len(data) {
		return fmt.Errorf("insufficient data for field After")
	}
	s.After = data[offset]
	offset++

	if offset >= len(data) {
		return fmt.Errorf("insufficient data for field Before")
	}
	s.Before = data[offset]
	offset++

	return nil
}

// CairoSize returns the serialized size for ComponentsSimpleWritten
func (s *ComponentsSimpleWritten) CairoSize() int {
	return -1 // Dynamic size
}

// IsComponentsSimpleEvent implements the ComponentsSimpleEvent interface
func (e ComponentsSimpleWritten) IsComponentsSimpleEvent() bool {
	return true
}

// IsComponentsOtherEvent implements the ComponentsOtherEvent interface
func (e ComponentsSimpleWritten) IsComponentsOtherEvent() bool {
	return true
}


type ComponentsWrittenAb struct {
	Data *felt.Felt `json:"data"`
}

// MarshalCairo serializes ComponentsWrittenAb to Cairo felt array
func (s *ComponentsWrittenAb) MarshalCairo() ([]*felt.Felt, error) {
	var result []*felt.Felt

	result = append(result, s.Data)
	return result, nil
}

// UnmarshalCairo deserializes ComponentsWrittenAb from Cairo felt array
func (s *ComponentsWrittenAb) UnmarshalCairo(data []*felt.Felt) error {
	offset := 0

	if offset >= len(data) {
		return fmt.Errorf("insufficient data for field Data")
	}
	s.Data = data[offset]
	offset++

	return nil
}

// CairoSize returns the serialized size for ComponentsWrittenAb
func (s *ComponentsWrittenAb) CairoSize() int {
	return -1 // Dynamic size
}

// IsComponentsSimpleEvent implements the ComponentsSimpleEvent interface
func (e ComponentsWrittenAb) IsComponentsSimpleEvent() bool {
	return true
}


type ComponentsMyStructOther struct {
	Data *big.Int `json:"data"`
}

// MarshalCairo serializes ComponentsMyStructOther to Cairo felt array
func (s *ComponentsMyStructOther) MarshalCairo() ([]*felt.Felt, error) {
	var result []*felt.Felt

	result = append(result, cainome.FeltFromBigInt(s.Data))
	return result, nil
}

// UnmarshalCairo deserializes ComponentsMyStructOther from Cairo felt array
func (s *ComponentsMyStructOther) UnmarshalCairo(data []*felt.Felt) error {
	offset := 0

	if offset >= len(data) {
		return fmt.Errorf("insufficient data for field Data")
	}
	s.Data = cainome.BigIntFromFelt(data[offset])
	offset++

	return nil
}

// CairoSize returns the serialized size for ComponentsMyStructOther
func (s *ComponentsMyStructOther) CairoSize() int {
	return -1 // Dynamic size
}


type ComponentsOtherWritten struct {
	Data *felt.Felt `json:"data"`
}

// MarshalCairo serializes ComponentsOtherWritten to Cairo felt array
func (s *ComponentsOtherWritten) MarshalCairo() ([]*felt.Felt, error) {
	var result []*felt.Felt

	result = append(result, s.Data)
	return result, nil
}

// UnmarshalCairo deserializes ComponentsOtherWritten from Cairo felt array
func (s *ComponentsOtherWritten) UnmarshalCairo(data []*felt.Felt) error {
	offset := 0

	if offset >= len(data) {
		return fmt.Errorf("insufficient data for field Data")
	}
	s.Data = data[offset]
	offset++

	return nil
}

// CairoSize returns the serialized size for ComponentsOtherWritten
func (s *ComponentsOtherWritten) CairoSize() int {
	return -1 // Dynamic size
}

// IsComponentsSimpleEvent implements the ComponentsSimpleEvent interface
func (e ComponentsOtherWritten) IsComponentsSimpleEvent() bool {
	return true
}

// IsComponentsOtherEvent implements the ComponentsOtherEvent interface
func (e ComponentsOtherWritten) IsComponentsOtherEvent() bool {
	return true
}


// ComponentsComponentsContractEvent represents a contract event
type ComponentsComponentsContractEvent interface {
	IsComponentsComponentsContractEvent() bool
}

const (
	ComponentsComponentsContractEvent_OutterEvent = "OutterEvent"
	ComponentsComponentsContractEvent_SimpleEvent = "SimpleEvent"
	ComponentsComponentsContractEvent_SimpleEventOther = "SimpleEventOther"
)


// ComponentsSimpleEvent represents a contract event
type ComponentsSimpleEvent interface {
	IsComponentsSimpleEvent() bool
}

const (
	ComponentsSimpleEvent_Written = "Written"
	ComponentsSimpleEvent_Written88 = "Written88"
)


// ComponentsOtherEvent represents a contract event
type ComponentsOtherEvent interface {
	IsComponentsOtherEvent() bool
}

const (
	ComponentsOtherEvent_Written = "Written"
)


type ComponentsReader struct {
	contractAddress *felt.Felt
	provider rpc.RpcProvider
}

type ComponentsWriter struct {
	contractAddress *felt.Felt
	account *account.Account
}

type Components struct {
	*ComponentsReader
	*ComponentsWriter
}

func NewComponentsReader(contractAddress *felt.Felt, provider rpc.RpcProvider) *ComponentsReader {
	return &ComponentsReader {
		contractAddress: contractAddress,
		provider: provider,
	}
}

func NewComponentsWriter(contractAddress *felt.Felt, account *account.Account) *ComponentsWriter {
	return &ComponentsWriter {
		contractAddress: contractAddress,
		account: account,
	}
}

func NewComponents(contractAddress *felt.Felt, account *account.Account) *Components {
	return &Components {
		ComponentsReader: NewComponentsReader(contractAddress, account.Provider),
		ComponentsWriter: NewComponentsWriter(contractAddress, account),
	}
}

func (components_writer *ComponentsWriter) ArrayStructSimple(ctx context.Context, opts *cainome.InvokeOpts) ([]ComponentsMyStructSimple, *felt.Felt, error) {
	// Setup invoke options
	if opts == nil {
		opts = &cainome.InvokeOpts{}
	}

	// No parameters required
	calldata := []*felt.Felt{}

	// Build and send invoke transaction using cainome helper
	txHash, err := cainome.BuildAndSendInvokeTxn(ctx, components_writer.account, components_writer.contractAddress, utils.GetSelectorFromNameFelt("array_struct_simple"), calldata, opts)
	if err != nil {
		return nil, nil, fmt.Errorf("failed to submit invoke transaction: %w", err)
	}

	return nil, txHash, nil
}

func (components_writer *ComponentsWriter) ArrayStructSimpleOther(ctx context.Context, opts *cainome.InvokeOpts) ([]ComponentsMyStructOther, *felt.Felt, error) {
	// Setup invoke options
	if opts == nil {
		opts = &cainome.InvokeOpts{}
	}

	// No parameters required
	calldata := []*felt.Felt{}

	// Build and send invoke transaction using cainome helper
	txHash, err := cainome.BuildAndSendInvokeTxn(ctx, components_writer.account, components_writer.contractAddress, utils.GetSelectorFromNameFelt("array_struct_simple_other"), calldata, opts)
	if err != nil {
		return nil, nil, fmt.Errorf("failed to submit invoke transaction: %w", err)
	}

	return nil, txHash, nil
}

func (components_reader *ComponentsReader) ReadData(ctx context.Context, opts *cainome.CallOpts) (*felt.Felt, error) {
	// Setup call options
	if opts == nil {
		opts = &cainome.CallOpts{}
	}
	var blockID rpc.BlockID
	if opts.BlockID != nil {
		blockID = *opts.BlockID
	} else {
		blockID = rpc.BlockID{Tag: "latest"}
	}

	// No parameters required
	calldata := []*felt.Felt{}

	// Make the contract call
	functionCall := rpc.FunctionCall{
		ContractAddress:    components_reader.contractAddress,
		EntryPointSelector: utils.GetSelectorFromNameFelt("read_data"),
		Calldata:           calldata,
	}

	response, err := components_reader.provider.Call(ctx, functionCall, blockID)
	if err != nil {
		return nil, err
	}

	// Deserialize response to proper type
	if len(response) == 0 {
		return nil, fmt.Errorf("empty response")
	}
	return response[0], nil
}

func (components_writer *ComponentsWriter) Simple(ctx context.Context, opts *cainome.InvokeOpts) (*felt.Felt, error) {
	// Setup invoke options
	if opts == nil {
		opts = &cainome.InvokeOpts{}
	}

	// No parameters required
	calldata := []*felt.Felt{}

	// Build and send invoke transaction using cainome helper
	txHash, err := cainome.BuildAndSendInvokeTxn(ctx, components_writer.account, components_writer.contractAddress, utils.GetSelectorFromNameFelt("simple"), calldata, opts)
	if err != nil {
		return nil, fmt.Errorf("failed to submit invoke transaction: %w", err)
	}

	return txHash, nil
}

func (components_writer *ComponentsWriter) SimpleOther(ctx context.Context, opts *cainome.InvokeOpts) (*felt.Felt, error) {
	// Setup invoke options
	if opts == nil {
		opts = &cainome.InvokeOpts{}
	}

	// No parameters required
	calldata := []*felt.Felt{}

	// Build and send invoke transaction using cainome helper
	txHash, err := cainome.BuildAndSendInvokeTxn(ctx, components_writer.account, components_writer.contractAddress, utils.GetSelectorFromNameFelt("simple_other"), calldata, opts)
	if err != nil {
		return nil, fmt.Errorf("failed to submit invoke transaction: %w", err)
	}

	return txHash, nil
}

func (components_writer *ComponentsWriter) TupleEvents(ctx context.Context, opts *cainome.InvokeOpts) (struct {
	Field0 ComponentsMyStructSimple
	Field1 ComponentsMyStructOther
}, *felt.Felt, error) {
	// Setup invoke options
	if opts == nil {
		opts = &cainome.InvokeOpts{}
	}

	// No parameters required
	calldata := []*felt.Felt{}

	// Build and send invoke transaction using cainome helper
	txHash, err := cainome.BuildAndSendInvokeTxn(ctx, components_writer.account, components_writer.contractAddress, utils.GetSelectorFromNameFelt("tuple_events"), calldata, opts)
	if err != nil {
		return struct {
	Field0 ComponentsMyStructSimple
	Field1 ComponentsMyStructOther
}{}, nil, fmt.Errorf("failed to submit invoke transaction: %w", err)
	}

	return struct {
	Field0 ComponentsMyStructSimple
	Field1 ComponentsMyStructOther
}{}, txHash, nil
}

func (components_writer *ComponentsWriter) WriteData(ctx context.Context, data *felt.Felt, opts *cainome.InvokeOpts) (*felt.Felt, error) {
	// Setup invoke options
	if opts == nil {
		opts = &cainome.InvokeOpts{}
	}

	// Serialize parameters to calldata
	calldata := []*felt.Felt{}
	calldata = append(calldata, data)

	// Build and send invoke transaction using cainome helper
	txHash, err := cainome.BuildAndSendInvokeTxn(ctx, components_writer.account, components_writer.contractAddress, utils.GetSelectorFromNameFelt("write_data"), calldata, opts)
	if err != nil {
		return nil, fmt.Errorf("failed to submit invoke transaction: %w", err)
	}

	return txHash, nil
}

