// Code generated by Cainome. DO NOT EDIT.
// Generated from ABI file.

package abigen

import (
	"fmt"
)

// Result type for handling Cairo Result types with idiomatic Go error handling
type Result[T, E any] struct {
	IsOk bool
	Ok   T
	Err  E
}

// NewResultOk creates a successful Result
func NewResultOk[T, E any](value T) Result[T, E] {
	return Result[T, E]{IsOk: true, Ok: value}
}

// NewResultErr creates a failed Result
func NewResultErr[T, E any](err E) Result[T, E] {
	return Result[T, E]{IsOk: false, Err: err}
}

// Unwrap returns the success value and error in idiomatic Go pattern
func (r Result[T, E]) Unwrap() (T, error) {
	if r.IsOk {
		return r.Ok, nil
	}
	var zero T
	// If E implements error interface, use it directly
	if err, ok := any(r.Err).(error); ok {
		return zero, err
	}
	// Otherwise, create a generic error
	return zero, fmt.Errorf("result error: %+v", r.Err)
}

