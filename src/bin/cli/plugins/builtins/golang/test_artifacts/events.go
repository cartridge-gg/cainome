// Code generated by Cainome. DO NOT EDIT.
// Generated from ABI file.

package abigen

import (
	"context"
	"fmt"
	"math/big"
	"github.com/NethermindEth/juno/core/felt"
	"github.com/NethermindEth/starknet.go/rpc"
)

type EventOnlyKey struct {
	Value *felt.Felt `json:"value"`
}

// EventName returns the name of this event type
func (e EventOnlyKey) EventName() string {
	return "only_key"
}

// IsSimpleEventsEvent implements the SimpleEventsEvent interface
func (e EventOnlyKey) IsSimpleEventsEvent() bool {
	return true
}


type EventAll struct {
	Header *felt.Felt `json:"header"`
	Value []*felt.Felt `json:"value"`
}

// EventName returns the name of this event type
func (e EventAll) EventName() string {
	return "all"
}

// IsSimpleEventsEvent implements the SimpleEventsEvent interface
func (e EventAll) IsSimpleEventsEvent() bool {
	return true
}


type EventOnlyData struct {
	Value *felt.Felt `json:"value"`
}

// EventName returns the name of this event type
func (e EventOnlyData) EventName() string {
	return "only_data"
}

// IsSimpleEventsEvent implements the SimpleEventsEvent interface
func (e EventOnlyData) IsSimpleEventsEvent() bool {
	return true
}


type EventMultiple struct {
	Key1 *felt.Felt `json:"key1"`
	Key2 *felt.Felt `json:"key2"`
	Data1 *felt.Felt `json:"data1"`
	Data2 *big.Int `json:"data2"`
	Data3 struct {
	Field0 *felt.Felt
	Field1 *felt.Felt
} `json:"data3"`
}

// EventName returns the name of this event type
func (e EventMultiple) EventName() string {
	return "multiple"
}

// IsSimpleEventsEvent implements the SimpleEventsEvent interface
func (e EventMultiple) IsSimpleEventsEvent() bool {
	return true
}


type EventNothing struct {
}

// EventName returns the name of this event type
func (e EventNothing) EventName() string {
	return "nothing"
}

// IsSimpleEventsEvent implements the SimpleEventsEvent interface
func (e EventNothing) IsSimpleEventsEvent() bool {
	return true
}


type EventWithOtherName struct {
	Value *felt.Felt `json:"value"`
}

// EventName returns the name of this event type
func (e EventWithOtherName) EventName() string {
	return "with_other_name"
}

// IsSimpleEventsEvent implements the SimpleEventsEvent interface
func (e EventWithOtherName) IsSimpleEventsEvent() bool {
	return true
}


// SimpleEventsEvent represents a contract event
type SimpleEventsEvent interface {
	IsSimpleEventsEvent() bool
}

const (
	SimpleEventsEvent_EventOnlyKey = "EventOnlyKey"
	SimpleEventsEvent_EventOnlyData = "EventOnlyData"
	SimpleEventsEvent_EventAll = "EventAll"
	SimpleEventsEvent_EventMultiple = "EventMultiple"
	SimpleEventsEvent_EventNothing = "EventNothing"
	SimpleEventsEvent_SuperEvent = "SuperEvent"
)


type Events struct {
	contractAddress *felt.Felt
	provider *rpc.Provider
}

func NewEvents(contractAddress *felt.Felt, provider *rpc.Provider) *Events {
	return &Events {
		contractAddress: contractAddress,
		provider: provider,
	}
}

func (events *Events) EmitOnlyKey(ctx context.Context) error {
	// No parameters required
	calldata := []*felt.Felt{}

	// TODO: Implement invoke transaction
	// This requires account/signer setup for transaction submission
	_ = calldata
	return fmt.Errorf("invoke methods require account setup - not yet implemented")
}

func (events *Events) EmitOnlyData(ctx context.Context) error {
	// No parameters required
	calldata := []*felt.Felt{}

	// TODO: Implement invoke transaction
	// This requires account/signer setup for transaction submission
	_ = calldata
	return fmt.Errorf("invoke methods require account setup - not yet implemented")
}

func (events *Events) EmitAll(ctx context.Context) error {
	// No parameters required
	calldata := []*felt.Felt{}

	// TODO: Implement invoke transaction
	// This requires account/signer setup for transaction submission
	_ = calldata
	return fmt.Errorf("invoke methods require account setup - not yet implemented")
}

func (events *Events) EmitMultiple(ctx context.Context) error {
	// No parameters required
	calldata := []*felt.Felt{}

	// TODO: Implement invoke transaction
	// This requires account/signer setup for transaction submission
	_ = calldata
	return fmt.Errorf("invoke methods require account setup - not yet implemented")
}

func (events *Events) EmitNothing(ctx context.Context) error {
	// No parameters required
	calldata := []*felt.Felt{}

	// TODO: Implement invoke transaction
	// This requires account/signer setup for transaction submission
	_ = calldata
	return fmt.Errorf("invoke methods require account setup - not yet implemented")
}

func (events *Events) EmitSuper(ctx context.Context) error {
	// No parameters required
	calldata := []*felt.Felt{}

	// TODO: Implement invoke transaction
	// This requires account/signer setup for transaction submission
	_ = calldata
	return fmt.Errorf("invoke methods require account setup - not yet implemented")
}

