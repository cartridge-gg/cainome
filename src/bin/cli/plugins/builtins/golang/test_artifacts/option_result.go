// Code generated by Cainome. DO NOT EDIT.
// Generated from ABI file.

package abigen

import (
	"context"
	"fmt"
	"math/big"
	"github.com/NethermindEth/juno/core/felt"
	"github.com/NethermindEth/starknet.go/rpc"
	"github.com/NethermindEth/starknet.go/utils"
)

type GenericOneOptionResult struct {
	A *felt.Felt `json:"a"`
	B *felt.Felt `json:"b"`
	C *big.Int `json:"c"`
}

// MarshalCairo serializes GenericOneOptionResult to Cairo felt array
func (s *GenericOneOptionResult) MarshalCairo() ([]*felt.Felt, error) {
	var result []*felt.Felt

	result = append(result, s.A)
	result = append(result, s.B)
	result = append(result, FeltFromBigInt(s.C))
	return result, nil
}

// UnmarshalCairo deserializes GenericOneOptionResult from Cairo felt array
func (s *GenericOneOptionResult) UnmarshalCairo(data []*felt.Felt) error {
	offset := 0

	if offset >= len(data) {
		return fmt.Errorf("insufficient data for field A")
	}
	s.A = data[offset]
	offset++

	if offset >= len(data) {
		return fmt.Errorf("insufficient data for field B")
	}
	s.B = data[offset]
	offset++

	if offset >= len(data) {
		return fmt.Errorf("insufficient data for field C")
	}
	s.C = BigIntFromFelt(data[offset])
	offset++

	return nil
}

// CairoSize returns the serialized size for GenericOneOptionResult
func (s *GenericOneOptionResult) CairoSize() int {
	return -1 // Dynamic size
}


// OptionResultEvent represents a contract event
type OptionResultEvent interface {
	IsOptionResultEvent() bool
}


type OptionResult struct {
	contractAddress *felt.Felt
	provider *rpc.Provider
}

func NewOptionResult(contractAddress *felt.Felt, provider *rpc.Provider) *OptionResult {
	return &OptionResult {
		contractAddress: contractAddress,
		provider: provider,
	}
}

func (option_result *OptionResult) ResultOkUnit(ctx context.Context, res Result[struct{}, *felt.Felt], opts *CallOpts) (Result[uint64, *felt.Felt], error) {
	// Setup call options
	if opts == nil {
		opts = &CallOpts{}
	}
	var blockID rpc.BlockID
	if opts.BlockID != nil {
		blockID = *opts.BlockID
	} else {
		blockID = rpc.BlockID{Tag: "latest"}
	}

	// Serialize parameters to calldata
	calldata := []*felt.Felt{}
	// TODO: Serialize basic type res to felt
	_ = res // TODO: add to calldata

	// Make the contract call
	functionCall := rpc.FunctionCall{
		ContractAddress:    option_result.contractAddress,
		EntryPointSelector: utils.GetSelectorFromNameFelt("result_ok_unit"),
		Calldata:           calldata,
	}

	response, err := option_result.provider.Call(ctx, functionCall, blockID)
	if err != nil {
		return Result[uint64, *felt.Felt]{}, err
	}

	// Deserialize response to proper type
	if len(response) == 0 {
		return Result[uint64, *felt.Felt]{}, fmt.Errorf("empty response")
	}
	var result Result[uint64, *felt.Felt]
	// TODO: Convert felt to basic type
	_ = response // TODO: deserialize response into result
	return result, nil
}

func (option_result *OptionResult) ResultOkStruct(ctx context.Context, res Result[*GenericOneOptionResult, *felt.Felt], opts *CallOpts) (Result[uint64, *felt.Felt], error) {
	// Setup call options
	if opts == nil {
		opts = &CallOpts{}
	}
	var blockID rpc.BlockID
	if opts.BlockID != nil {
		blockID = *opts.BlockID
	} else {
		blockID = rpc.BlockID{Tag: "latest"}
	}

	// Serialize parameters to calldata
	calldata := []*felt.Felt{}
	// TODO: Serialize basic type res to felt
	_ = res // TODO: add to calldata

	// Make the contract call
	functionCall := rpc.FunctionCall{
		ContractAddress:    option_result.contractAddress,
		EntryPointSelector: utils.GetSelectorFromNameFelt("result_ok_struct"),
		Calldata:           calldata,
	}

	response, err := option_result.provider.Call(ctx, functionCall, blockID)
	if err != nil {
		return Result[uint64, *felt.Felt]{}, err
	}

	// Deserialize response to proper type
	if len(response) == 0 {
		return Result[uint64, *felt.Felt]{}, fmt.Errorf("empty response")
	}
	var result Result[uint64, *felt.Felt]
	// TODO: Convert felt to basic type
	_ = response // TODO: deserialize response into result
	return result, nil
}

func (option_result *OptionResult) ResultOkTupleStruct(ctx context.Context, res Result[struct {
	Field0 *GenericOneOptionResult
	Field1 *felt.Felt
}, *felt.Felt], opts *CallOpts) (Result[uint64, *felt.Felt], error) {
	// Setup call options
	if opts == nil {
		opts = &CallOpts{}
	}
	var blockID rpc.BlockID
	if opts.BlockID != nil {
		blockID = *opts.BlockID
	} else {
		blockID = rpc.BlockID{Tag: "latest"}
	}

	// Serialize parameters to calldata
	calldata := []*felt.Felt{}
	// TODO: Serialize basic type res to felt
	_ = res // TODO: add to calldata

	// Make the contract call
	functionCall := rpc.FunctionCall{
		ContractAddress:    option_result.contractAddress,
		EntryPointSelector: utils.GetSelectorFromNameFelt("result_ok_tuple_struct"),
		Calldata:           calldata,
	}

	response, err := option_result.provider.Call(ctx, functionCall, blockID)
	if err != nil {
		return Result[uint64, *felt.Felt]{}, err
	}

	// Deserialize response to proper type
	if len(response) == 0 {
		return Result[uint64, *felt.Felt]{}, fmt.Errorf("empty response")
	}
	var result Result[uint64, *felt.Felt]
	// TODO: Convert felt to basic type
	_ = response // TODO: deserialize response into result
	return result, nil
}

func (option_result *OptionResult) ResultOk(ctx context.Context, res Result[*felt.Felt, *big.Int], opts *CallOpts) (Result[uint64, *felt.Felt], error) {
	// Setup call options
	if opts == nil {
		opts = &CallOpts{}
	}
	var blockID rpc.BlockID
	if opts.BlockID != nil {
		blockID = *opts.BlockID
	} else {
		blockID = rpc.BlockID{Tag: "latest"}
	}

	// Serialize parameters to calldata
	calldata := []*felt.Felt{}
	// TODO: Serialize basic type res to felt
	_ = res // TODO: add to calldata

	// Make the contract call
	functionCall := rpc.FunctionCall{
		ContractAddress:    option_result.contractAddress,
		EntryPointSelector: utils.GetSelectorFromNameFelt("result_ok"),
		Calldata:           calldata,
	}

	response, err := option_result.provider.Call(ctx, functionCall, blockID)
	if err != nil {
		return Result[uint64, *felt.Felt]{}, err
	}

	// Deserialize response to proper type
	if len(response) == 0 {
		return Result[uint64, *felt.Felt]{}, fmt.Errorf("empty response")
	}
	var result Result[uint64, *felt.Felt]
	// TODO: Convert felt to basic type
	_ = response // TODO: deserialize response into result
	return result, nil
}

func (option_result *OptionResult) ResultErr(ctx context.Context, res Result[*felt.Felt, *felt.Felt], opts *CallOpts) (Result[*felt.Felt, *big.Int], error) {
	// Setup call options
	if opts == nil {
		opts = &CallOpts{}
	}
	var blockID rpc.BlockID
	if opts.BlockID != nil {
		blockID = *opts.BlockID
	} else {
		blockID = rpc.BlockID{Tag: "latest"}
	}

	// Serialize parameters to calldata
	calldata := []*felt.Felt{}
	// TODO: Serialize basic type res to felt
	_ = res // TODO: add to calldata

	// Make the contract call
	functionCall := rpc.FunctionCall{
		ContractAddress:    option_result.contractAddress,
		EntryPointSelector: utils.GetSelectorFromNameFelt("result_err"),
		Calldata:           calldata,
	}

	response, err := option_result.provider.Call(ctx, functionCall, blockID)
	if err != nil {
		return Result[*felt.Felt, *big.Int]{}, err
	}

	// Deserialize response to proper type
	if len(response) == 0 {
		return Result[*felt.Felt, *big.Int]{}, fmt.Errorf("empty response")
	}
	var result Result[*felt.Felt, *big.Int]
	// TODO: Convert felt to basic type
	_ = response // TODO: deserialize response into result
	return result, nil
}

func (option_result *OptionResult) OptionSome(ctx context.Context, opt **felt.Felt, opts *CallOpts) (*[]*felt.Felt, error) {
	// Setup call options
	if opts == nil {
		opts = &CallOpts{}
	}
	var blockID rpc.BlockID
	if opts.BlockID != nil {
		blockID = *opts.BlockID
	} else {
		blockID = rpc.BlockID{Tag: "latest"}
	}

	// Serialize parameters to calldata
	calldata := []*felt.Felt{}
	// TODO: Serialize basic type opt to felt
	_ = opt // TODO: add to calldata

	// Make the contract call
	functionCall := rpc.FunctionCall{
		ContractAddress:    option_result.contractAddress,
		EntryPointSelector: utils.GetSelectorFromNameFelt("option_some"),
		Calldata:           calldata,
	}

	response, err := option_result.provider.Call(ctx, functionCall, blockID)
	if err != nil {
		return nil, err
	}

	// Deserialize response to proper type
	if len(response) == 0 {
		return nil, fmt.Errorf("empty response")
	}
	var result *[]*felt.Felt
	// TODO: Convert felt to basic type
	_ = response // TODO: deserialize response into result
	return result, nil
}

func (option_result *OptionResult) OptionNone(ctx context.Context, opt **felt.Felt, opts *CallOpts) (*uint64, error) {
	// Setup call options
	if opts == nil {
		opts = &CallOpts{}
	}
	var blockID rpc.BlockID
	if opts.BlockID != nil {
		blockID = *opts.BlockID
	} else {
		blockID = rpc.BlockID{Tag: "latest"}
	}

	// Serialize parameters to calldata
	calldata := []*felt.Felt{}
	// TODO: Serialize basic type opt to felt
	_ = opt // TODO: add to calldata

	// Make the contract call
	functionCall := rpc.FunctionCall{
		ContractAddress:    option_result.contractAddress,
		EntryPointSelector: utils.GetSelectorFromNameFelt("option_none"),
		Calldata:           calldata,
	}

	response, err := option_result.provider.Call(ctx, functionCall, blockID)
	if err != nil {
		return nil, err
	}

	// Deserialize response to proper type
	if len(response) == 0 {
		return nil, fmt.Errorf("empty response")
	}
	var result *uint64
	// TODO: Convert felt to basic type
	_ = response // TODO: deserialize response into result
	return result, nil
}

