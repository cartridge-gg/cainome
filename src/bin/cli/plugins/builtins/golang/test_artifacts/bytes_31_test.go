// Code generated by Cainome. DO NOT EDIT.
// Generated from ABI file.

package abigen

import (
	"context"
	"fmt"
	"github.com/NethermindEth/juno/core/felt"
	"github.com/NethermindEth/starknet.go/rpc"
	"github.com/NethermindEth/starknet.go/utils"
)

type Bytes31Struct struct {
	Data [31]byte `json:"data"`
}

// MarshalCairo serializes Bytes31Struct to Cairo felt array
func (s *Bytes31Struct) MarshalCairo() ([]*felt.Felt, error) {
	var result []*felt.Felt

	// TODO: Handle bytes31 conversion for field Data
	return result, nil
}

// UnmarshalCairo deserializes Bytes31Struct from Cairo felt array
func (s *Bytes31Struct) UnmarshalCairo(data []*felt.Felt) error {
	offset := 0

	// TODO: Handle unknown core basic type for field Data unmarshal
	_ = offset // Suppress unused variable warning
	return nil
}

// CairoSize returns the serialized size for Bytes31Struct
func (s *Bytes31Struct) CairoSize() int {
	return -1 // Dynamic size
}


type Bytes31Test struct {
	contractAddress *felt.Felt
	provider *rpc.Provider
}

func NewBytes31Test(contractAddress *felt.Felt, provider *rpc.Provider) *Bytes31Test {
	return &Bytes31Test {
		contractAddress: contractAddress,
		provider: provider,
	}
}

func (bytes_31_test *Bytes31Test) GetBytes31(ctx context.Context, opts *CallOpts) ([31]byte, error) {
	// Setup call options
	if opts == nil {
		opts = &CallOpts{}
	}
	var blockID rpc.BlockID
	if opts.BlockID != nil {
		blockID = *opts.BlockID
	} else {
		blockID = rpc.BlockID{Tag: "latest"}
	}

	// No parameters required
	calldata := []*felt.Felt{}

	// Make the contract call
	functionCall := rpc.FunctionCall{
		ContractAddress:    bytes_31_test.contractAddress,
		EntryPointSelector: utils.GetSelectorFromNameFelt("get_bytes31"),
		Calldata:           calldata,
	}

	response, err := bytes_31_test.provider.Call(ctx, functionCall, blockID)
	if err != nil {
		return [31]byte{}, err
	}

	// Deserialize response to proper type
	if len(response) == 0 {
		return [31]byte{}, fmt.Errorf("empty response")
	}
	var result [31]byte
	// TODO: Convert felt to basic type
	_ = response // TODO: deserialize response into result
	return result, nil
}

