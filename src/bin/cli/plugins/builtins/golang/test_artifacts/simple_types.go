// Code generated by Cainome. DO NOT EDIT.
// Generated from ABI file.

package abigen

import (
	"context"
	"fmt"
	"math/big"
	"github.com/NethermindEth/juno/core/felt"
	"github.com/NethermindEth/starknet.go/rpc"
	"github.com/cartridge-gg/cainome"
	"github.com/NethermindEth/starknet.go/utils"
)

// SimpleTypesEvent represents a contract event
type SimpleTypesEvent interface {
	IsSimpleTypesEvent() bool
}


type SimpleTypes struct {
	contractAddress *felt.Felt
	provider *rpc.Provider
}

func NewSimpleTypes(contractAddress *felt.Felt, provider *rpc.Provider) *SimpleTypes {
	return &SimpleTypes {
		contractAddress: contractAddress,
		provider: provider,
	}
}

func (simple_types *SimpleTypes) GetBool(ctx context.Context, opts *cainome.CallOpts) (bool, error) {
	// Setup call options
	if opts == nil {
		opts = &cainome.CallOpts{}
	}
	var blockID rpc.BlockID
	if opts.BlockID != nil {
		blockID = *opts.BlockID
	} else {
		blockID = rpc.BlockID{Tag: "latest"}
	}

	// No parameters required
	calldata := []*felt.Felt{}

	// Make the contract call
	functionCall := rpc.FunctionCall{
		ContractAddress:    simple_types.contractAddress,
		EntryPointSelector: utils.GetSelectorFromNameFelt("get_bool"),
		Calldata:           calldata,
	}

	response, err := simple_types.provider.Call(ctx, functionCall, blockID)
	if err != nil {
		return false, err
	}

	// Deserialize response to proper type
	if len(response) == 0 {
		return false, fmt.Errorf("empty response")
	}
	result := cainome.UintFromFelt(response[0]) != 0
	return result, nil
}

func (simple_types *SimpleTypes) SetBool(ctx context.Context, v bool) error {
	// Serialize parameters to calldata
	calldata := []*felt.Felt{}
	if v {
		calldata = append(calldata, cainome.FeltFromUint(1))
	} else {
		calldata = append(calldata, cainome.FeltFromUint(0))
	}

	// TODO: Implement invoke transaction
	// This requires account/signer setup for transaction submission
	_ = calldata
	return fmt.Errorf("invoke methods require account setup - not yet implemented")
}

func (simple_types *SimpleTypes) GetFelt(ctx context.Context, opts *cainome.CallOpts) (*felt.Felt, error) {
	// Setup call options
	if opts == nil {
		opts = &cainome.CallOpts{}
	}
	var blockID rpc.BlockID
	if opts.BlockID != nil {
		blockID = *opts.BlockID
	} else {
		blockID = rpc.BlockID{Tag: "latest"}
	}

	// No parameters required
	calldata := []*felt.Felt{}

	// Make the contract call
	functionCall := rpc.FunctionCall{
		ContractAddress:    simple_types.contractAddress,
		EntryPointSelector: utils.GetSelectorFromNameFelt("get_felt"),
		Calldata:           calldata,
	}

	response, err := simple_types.provider.Call(ctx, functionCall, blockID)
	if err != nil {
		return nil, err
	}

	// Deserialize response to proper type
	if len(response) == 0 {
		return nil, fmt.Errorf("empty response")
	}
	return response[0], nil
}

func (simple_types *SimpleTypes) SetFelt(ctx context.Context, feltValue *felt.Felt) error {
	// Serialize parameters to calldata
	calldata := []*felt.Felt{}
	calldata = append(calldata, feltValue)

	// TODO: Implement invoke transaction
	// This requires account/signer setup for transaction submission
	_ = calldata
	return fmt.Errorf("invoke methods require account setup - not yet implemented")
}

func (simple_types *SimpleTypes) GetU256(ctx context.Context, opts *cainome.CallOpts) (*big.Int, error) {
	// Setup call options
	if opts == nil {
		opts = &cainome.CallOpts{}
	}
	var blockID rpc.BlockID
	if opts.BlockID != nil {
		blockID = *opts.BlockID
	} else {
		blockID = rpc.BlockID{Tag: "latest"}
	}

	// No parameters required
	calldata := []*felt.Felt{}

	// Make the contract call
	functionCall := rpc.FunctionCall{
		ContractAddress:    simple_types.contractAddress,
		EntryPointSelector: utils.GetSelectorFromNameFelt("get_u256"),
		Calldata:           calldata,
	}

	response, err := simple_types.provider.Call(ctx, functionCall, blockID)
	if err != nil {
		return nil, err
	}

	// Deserialize response to proper type
	if len(response) == 0 {
		return nil, fmt.Errorf("empty response")
	}
	var result *big.Int
	// TODO: Convert felt to Composite(Composite { type_path: "core::integer::u256", inners: [CompositeInner { index: 0, name: "low", kind: NotUsed, token: CoreBasic(CoreBasic { type_path: "core::integer::u128" }) }, CompositeInner { index: 1, name: "high", kind: NotUsed, token: CoreBasic(CoreBasic { type_path: "core::integer::u128" }) }], generic_args: [], type: Struct, is_event: false, alias: None })
	_ = response
	return result, nil
}

func (simple_types *SimpleTypes) SetU256(ctx context.Context, uint_256 *big.Int) error {
	// Serialize parameters to calldata
	calldata := []*felt.Felt{}
	calldata = append(calldata, cainome.FeltFromBigInt(uint_256))

	// TODO: Implement invoke transaction
	// This requires account/signer setup for transaction submission
	_ = calldata
	return fmt.Errorf("invoke methods require account setup - not yet implemented")
}

func (simple_types *SimpleTypes) GetU64(ctx context.Context, opts *cainome.CallOpts) (uint64, error) {
	// Setup call options
	if opts == nil {
		opts = &cainome.CallOpts{}
	}
	var blockID rpc.BlockID
	if opts.BlockID != nil {
		blockID = *opts.BlockID
	} else {
		blockID = rpc.BlockID{Tag: "latest"}
	}

	// No parameters required
	calldata := []*felt.Felt{}

	// Make the contract call
	functionCall := rpc.FunctionCall{
		ContractAddress:    simple_types.contractAddress,
		EntryPointSelector: utils.GetSelectorFromNameFelt("get_u64"),
		Calldata:           calldata,
	}

	response, err := simple_types.provider.Call(ctx, functionCall, blockID)
	if err != nil {
		return 0, err
	}

	// Deserialize response to proper type
	if len(response) == 0 {
		return 0, fmt.Errorf("empty response")
	}
	result := uint64(cainome.UintFromFelt(response[0]))
	return result, nil
}

func (simple_types *SimpleTypes) SetU64(ctx context.Context, uint_64 uint64) error {
	// Serialize parameters to calldata
	calldata := []*felt.Felt{}
	calldata = append(calldata, cainome.FeltFromUint(uint64(uint_64)))

	// TODO: Implement invoke transaction
	// This requires account/signer setup for transaction submission
	_ = calldata
	return fmt.Errorf("invoke methods require account setup - not yet implemented")
}

func (simple_types *SimpleTypes) GetAddress(ctx context.Context, opts *cainome.CallOpts) (*felt.Felt, error) {
	// Setup call options
	if opts == nil {
		opts = &cainome.CallOpts{}
	}
	var blockID rpc.BlockID
	if opts.BlockID != nil {
		blockID = *opts.BlockID
	} else {
		blockID = rpc.BlockID{Tag: "latest"}
	}

	// No parameters required
	calldata := []*felt.Felt{}

	// Make the contract call
	functionCall := rpc.FunctionCall{
		ContractAddress:    simple_types.contractAddress,
		EntryPointSelector: utils.GetSelectorFromNameFelt("get_address"),
		Calldata:           calldata,
	}

	response, err := simple_types.provider.Call(ctx, functionCall, blockID)
	if err != nil {
		return nil, err
	}

	// Deserialize response to proper type
	if len(response) == 0 {
		return nil, fmt.Errorf("empty response")
	}
	return response[0], nil
}

func (simple_types *SimpleTypes) SetAddress(ctx context.Context, address *felt.Felt) error {
	// Serialize parameters to calldata
	calldata := []*felt.Felt{}
	calldata = append(calldata, address)

	// TODO: Implement invoke transaction
	// This requires account/signer setup for transaction submission
	_ = calldata
	return fmt.Errorf("invoke methods require account setup - not yet implemented")
}

func (simple_types *SimpleTypes) GetClassHash(ctx context.Context, opts *cainome.CallOpts) (*felt.Felt, error) {
	// Setup call options
	if opts == nil {
		opts = &cainome.CallOpts{}
	}
	var blockID rpc.BlockID
	if opts.BlockID != nil {
		blockID = *opts.BlockID
	} else {
		blockID = rpc.BlockID{Tag: "latest"}
	}

	// No parameters required
	calldata := []*felt.Felt{}

	// Make the contract call
	functionCall := rpc.FunctionCall{
		ContractAddress:    simple_types.contractAddress,
		EntryPointSelector: utils.GetSelectorFromNameFelt("get_class_hash"),
		Calldata:           calldata,
	}

	response, err := simple_types.provider.Call(ctx, functionCall, blockID)
	if err != nil {
		return nil, err
	}

	// Deserialize response to proper type
	if len(response) == 0 {
		return nil, fmt.Errorf("empty response")
	}
	return response[0], nil
}

func (simple_types *SimpleTypes) SetClassHash(ctx context.Context, class_hash *felt.Felt) error {
	// Serialize parameters to calldata
	calldata := []*felt.Felt{}
	calldata = append(calldata, class_hash)

	// TODO: Implement invoke transaction
	// This requires account/signer setup for transaction submission
	_ = calldata
	return fmt.Errorf("invoke methods require account setup - not yet implemented")
}

func (simple_types *SimpleTypes) GetEthAddress(ctx context.Context, opts *cainome.CallOpts) ([20]byte, error) {
	// Setup call options
	if opts == nil {
		opts = &cainome.CallOpts{}
	}
	var blockID rpc.BlockID
	if opts.BlockID != nil {
		blockID = *opts.BlockID
	} else {
		blockID = rpc.BlockID{Tag: "latest"}
	}

	// No parameters required
	calldata := []*felt.Felt{}

	// Make the contract call
	functionCall := rpc.FunctionCall{
		ContractAddress:    simple_types.contractAddress,
		EntryPointSelector: utils.GetSelectorFromNameFelt("get_eth_address"),
		Calldata:           calldata,
	}

	response, err := simple_types.provider.Call(ctx, functionCall, blockID)
	if err != nil {
		return [20]byte{}, err
	}

	// Deserialize response to proper type
	if len(response) == 0 {
		return [20]byte{}, fmt.Errorf("empty response")
	}
	var result [20]byte
	// TODO: Convert felt to Composite(Composite { type_path: "core::starknet::eth_address::EthAddress", inners: [CompositeInner { index: 0, name: "address", kind: NotUsed, token: CoreBasic(CoreBasic { type_path: "core::felt252" }) }], generic_args: [], type: Struct, is_event: false, alias: None })
	_ = response
	return result, nil
}

func (simple_types *SimpleTypes) SetEthAddress(ctx context.Context, eth_address [20]byte) error {
	// Serialize parameters to calldata
	calldata := []*felt.Felt{}
	calldata = append(calldata, cainome.FeltFromBytes(eth_address[:]))

	// TODO: Implement invoke transaction
	// This requires account/signer setup for transaction submission
	_ = calldata
	return fmt.Errorf("invoke methods require account setup - not yet implemented")
}

func (simple_types *SimpleTypes) GetTuple(ctx context.Context, opts *cainome.CallOpts) (struct {
	Field0 *felt.Felt
	Field1 *big.Int
}, error) {
	// Setup call options
	if opts == nil {
		opts = &cainome.CallOpts{}
	}
	var blockID rpc.BlockID
	if opts.BlockID != nil {
		blockID = *opts.BlockID
	} else {
		blockID = rpc.BlockID{Tag: "latest"}
	}

	// No parameters required
	calldata := []*felt.Felt{}

	// Make the contract call
	functionCall := rpc.FunctionCall{
		ContractAddress:    simple_types.contractAddress,
		EntryPointSelector: utils.GetSelectorFromNameFelt("get_tuple"),
		Calldata:           calldata,
	}

	response, err := simple_types.provider.Call(ctx, functionCall, blockID)
	if err != nil {
		return struct {
	Field0 *felt.Felt
	Field1 *big.Int
}{}, err
	}

	// Deserialize response to proper type
	if len(response) == 0 {
		return struct {
	Field0 *felt.Felt
	Field1 *big.Int
}{}, fmt.Errorf("empty response")
	}
	var result struct {
	Field0 *felt.Felt
	Field1 *big.Int
}
	// TODO: Convert felt to Tuple(Tuple { type_path: "(core::felt252, core::integer::u256)", inners: [CoreBasic(CoreBasic { type_path: "core::felt252" }), Composite(Composite { type_path: "core::integer::u256", inners: [], generic_args: [], type: Unknown, is_event: false, alias: None })] })
	_ = response
	return result, nil
}

func (simple_types *SimpleTypes) SetTuple(ctx context.Context, tuple struct {
	Field0 *felt.Felt
	Field1 *big.Int
}) error {
	// Serialize parameters to calldata
	calldata := []*felt.Felt{}
	// Tuple field tuple: marshal each sub-field
	calldata = append(calldata, tuple.Field0)
	calldata = append(calldata, cainome.FeltFromBigInt(tuple.Field1))

	// TODO: Implement invoke transaction
	// This requires account/signer setup for transaction submission
	_ = calldata
	return fmt.Errorf("invoke methods require account setup - not yet implemented")
}

func (simple_types *SimpleTypes) GetArray(ctx context.Context, opts *cainome.CallOpts) ([]*felt.Felt, error) {
	// Setup call options
	if opts == nil {
		opts = &cainome.CallOpts{}
	}
	var blockID rpc.BlockID
	if opts.BlockID != nil {
		blockID = *opts.BlockID
	} else {
		blockID = rpc.BlockID{Tag: "latest"}
	}

	// No parameters required
	calldata := []*felt.Felt{}

	// Make the contract call
	functionCall := rpc.FunctionCall{
		ContractAddress:    simple_types.contractAddress,
		EntryPointSelector: utils.GetSelectorFromNameFelt("get_array"),
		Calldata:           calldata,
	}

	response, err := simple_types.provider.Call(ctx, functionCall, blockID)
	if err != nil {
		return nil, err
	}

	// Deserialize response to proper type
	if len(response) == 0 {
		return nil, fmt.Errorf("empty response")
	}
	var result []*felt.Felt
	// TODO: Convert felt to Array(Array { type_path: "core::array::Span::<core::felt252>", inner: CoreBasic(CoreBasic { type_path: "core::felt252" }), is_legacy: false })
	_ = response
	return result, nil
}

func (simple_types *SimpleTypes) SetArray(ctx context.Context, data []*felt.Felt) error {
	// Serialize parameters to calldata
	calldata := []*felt.Felt{}
	if data_data, err := cainome.NewCairoFeltArray(data).MarshalCairo(); err != nil {
		return fmt.Errorf("failed to marshal data: %w", err)
	} else {
		calldata = append(calldata, data_data...)
	}

	// TODO: Implement invoke transaction
	// This requires account/signer setup for transaction submission
	_ = calldata
	return fmt.Errorf("invoke methods require account setup - not yet implemented")
}

