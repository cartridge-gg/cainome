// Code generated by Cainome. DO NOT EDIT.
// Generated from ABI file.

package abigen

import (
	"context"
	"fmt"
	"github.com/NethermindEth/juno/core/felt"
	"github.com/NethermindEth/starknet.go/rpc"
	"github.com/NethermindEth/starknet.go/utils"
)

type MixedEnum struct {
	Variant string `json:"variant"`
	Value   interface{} `json:"value,omitempty"`
}

const (
	MixedEnum_Variant1 = "Variant1"
	MixedEnum_Variant2 = "Variant2"
)

func NewMixedEnumVariant1() MixedEnum {
	return MixedEnum {
		Variant: "Variant1",
	}
}

func NewMixedEnumVariant2() MixedEnum {
	return MixedEnum {
		Variant: "Variant2",
	}
}


type SimpleEnum struct {
	Variant string `json:"variant"`
	Value   interface{} `json:"value,omitempty"`
}

const (
	SimpleEnum_Variant1 = "Variant1"
	SimpleEnum_Variant2 = "Variant2"
)

func NewSimpleEnumVariant1() SimpleEnum {
	return SimpleEnum {
		Variant: "Variant1",
	}
}

func NewSimpleEnumVariant2() SimpleEnum {
	return SimpleEnum {
		Variant: "Variant2",
	}
}


type TypedEnum struct {
	Variant string `json:"variant"`
	Value   interface{} `json:"value,omitempty"`
}

const (
	TypedEnum_Variant1 = "Variant1"
	TypedEnum_Variant2 = "Variant2"
	TypedEnum_Variant3 = "Variant3"
)

func NewTypedEnumVariant1() TypedEnum {
	return TypedEnum {
		Variant: "Variant1",
	}
}

func NewTypedEnumVariant2() TypedEnum {
	return TypedEnum {
		Variant: "Variant2",
	}
}

func NewTypedEnumVariant3() TypedEnum {
	return TypedEnum {
		Variant: "Variant3",
	}
}


// EnumsEvent represents a contract event
type EnumsEvent interface {
	IsEnumsEvent() bool
}


type Enums struct {
	contractAddress *felt.Felt
	provider *rpc.Provider
}

func NewEnums(contractAddress *felt.Felt, provider *rpc.Provider) *Enums {
	return &Enums {
		contractAddress: contractAddress,
		provider: provider,
	}
}

func (enums *Enums) GetSimple1(ctx context.Context, opts *CallOpts) (SimpleEnum, error) {
	// Setup call options
	if opts == nil {
		opts = &CallOpts{}
	}
	var blockID rpc.BlockID
	if opts.BlockID != nil {
		blockID = *opts.BlockID
	} else {
		blockID = rpc.BlockID{Tag: "latest"}
	}

	// No parameters required
	calldata := []*felt.Felt{}

	// Make the contract call
	functionCall := rpc.FunctionCall{
		ContractAddress:    enums.contractAddress,
		EntryPointSelector: utils.GetSelectorFromNameFelt("get_simple_1"),
		Calldata:           calldata,
	}

	response, err := enums.provider.Call(ctx, functionCall, blockID)
	if err != nil {
		return SimpleEnum{}, err
	}

	// TODO: Deserialize response to proper type
	if len(response) == 0 {
		return SimpleEnum{}, fmt.Errorf("empty response")
	}
	// For now, return zero value - proper deserialization needed
	var result SimpleEnum
	_ = response // TODO: deserialize response into result
	return result, nil
}

func (enums *Enums) GetSimple2(ctx context.Context, opts *CallOpts) (SimpleEnum, error) {
	// Setup call options
	if opts == nil {
		opts = &CallOpts{}
	}
	var blockID rpc.BlockID
	if opts.BlockID != nil {
		blockID = *opts.BlockID
	} else {
		blockID = rpc.BlockID{Tag: "latest"}
	}

	// No parameters required
	calldata := []*felt.Felt{}

	// Make the contract call
	functionCall := rpc.FunctionCall{
		ContractAddress:    enums.contractAddress,
		EntryPointSelector: utils.GetSelectorFromNameFelt("get_simple_2"),
		Calldata:           calldata,
	}

	response, err := enums.provider.Call(ctx, functionCall, blockID)
	if err != nil {
		return SimpleEnum{}, err
	}

	// TODO: Deserialize response to proper type
	if len(response) == 0 {
		return SimpleEnum{}, fmt.Errorf("empty response")
	}
	// For now, return zero value - proper deserialization needed
	var result SimpleEnum
	_ = response // TODO: deserialize response into result
	return result, nil
}

func (enums *Enums) GetTyped1(ctx context.Context, opts *CallOpts) (TypedEnum, error) {
	// Setup call options
	if opts == nil {
		opts = &CallOpts{}
	}
	var blockID rpc.BlockID
	if opts.BlockID != nil {
		blockID = *opts.BlockID
	} else {
		blockID = rpc.BlockID{Tag: "latest"}
	}

	// No parameters required
	calldata := []*felt.Felt{}

	// Make the contract call
	functionCall := rpc.FunctionCall{
		ContractAddress:    enums.contractAddress,
		EntryPointSelector: utils.GetSelectorFromNameFelt("get_typed_1"),
		Calldata:           calldata,
	}

	response, err := enums.provider.Call(ctx, functionCall, blockID)
	if err != nil {
		return TypedEnum{}, err
	}

	// TODO: Deserialize response to proper type
	if len(response) == 0 {
		return TypedEnum{}, fmt.Errorf("empty response")
	}
	// For now, return zero value - proper deserialization needed
	var result TypedEnum
	_ = response // TODO: deserialize response into result
	return result, nil
}

func (enums *Enums) GetTyped2(ctx context.Context, opts *CallOpts) (TypedEnum, error) {
	// Setup call options
	if opts == nil {
		opts = &CallOpts{}
	}
	var blockID rpc.BlockID
	if opts.BlockID != nil {
		blockID = *opts.BlockID
	} else {
		blockID = rpc.BlockID{Tag: "latest"}
	}

	// No parameters required
	calldata := []*felt.Felt{}

	// Make the contract call
	functionCall := rpc.FunctionCall{
		ContractAddress:    enums.contractAddress,
		EntryPointSelector: utils.GetSelectorFromNameFelt("get_typed_2"),
		Calldata:           calldata,
	}

	response, err := enums.provider.Call(ctx, functionCall, blockID)
	if err != nil {
		return TypedEnum{}, err
	}

	// TODO: Deserialize response to proper type
	if len(response) == 0 {
		return TypedEnum{}, fmt.Errorf("empty response")
	}
	// For now, return zero value - proper deserialization needed
	var result TypedEnum
	_ = response // TODO: deserialize response into result
	return result, nil
}

func (enums *Enums) GetTyped3(ctx context.Context, opts *CallOpts) (TypedEnum, error) {
	// Setup call options
	if opts == nil {
		opts = &CallOpts{}
	}
	var blockID rpc.BlockID
	if opts.BlockID != nil {
		blockID = *opts.BlockID
	} else {
		blockID = rpc.BlockID{Tag: "latest"}
	}

	// No parameters required
	calldata := []*felt.Felt{}

	// Make the contract call
	functionCall := rpc.FunctionCall{
		ContractAddress:    enums.contractAddress,
		EntryPointSelector: utils.GetSelectorFromNameFelt("get_typed_3"),
		Calldata:           calldata,
	}

	response, err := enums.provider.Call(ctx, functionCall, blockID)
	if err != nil {
		return TypedEnum{}, err
	}

	// TODO: Deserialize response to proper type
	if len(response) == 0 {
		return TypedEnum{}, fmt.Errorf("empty response")
	}
	// For now, return zero value - proper deserialization needed
	var result TypedEnum
	_ = response // TODO: deserialize response into result
	return result, nil
}

func (enums *Enums) GetMixed1(ctx context.Context, opts *CallOpts) (MixedEnum, error) {
	// Setup call options
	if opts == nil {
		opts = &CallOpts{}
	}
	var blockID rpc.BlockID
	if opts.BlockID != nil {
		blockID = *opts.BlockID
	} else {
		blockID = rpc.BlockID{Tag: "latest"}
	}

	// No parameters required
	calldata := []*felt.Felt{}

	// Make the contract call
	functionCall := rpc.FunctionCall{
		ContractAddress:    enums.contractAddress,
		EntryPointSelector: utils.GetSelectorFromNameFelt("get_mixed_1"),
		Calldata:           calldata,
	}

	response, err := enums.provider.Call(ctx, functionCall, blockID)
	if err != nil {
		return MixedEnum{}, err
	}

	// TODO: Deserialize response to proper type
	if len(response) == 0 {
		return MixedEnum{}, fmt.Errorf("empty response")
	}
	// For now, return zero value - proper deserialization needed
	var result MixedEnum
	_ = response // TODO: deserialize response into result
	return result, nil
}

func (enums *Enums) GetMixed2(ctx context.Context, opts *CallOpts) (MixedEnum, error) {
	// Setup call options
	if opts == nil {
		opts = &CallOpts{}
	}
	var blockID rpc.BlockID
	if opts.BlockID != nil {
		blockID = *opts.BlockID
	} else {
		blockID = rpc.BlockID{Tag: "latest"}
	}

	// No parameters required
	calldata := []*felt.Felt{}

	// Make the contract call
	functionCall := rpc.FunctionCall{
		ContractAddress:    enums.contractAddress,
		EntryPointSelector: utils.GetSelectorFromNameFelt("get_mixed_2"),
		Calldata:           calldata,
	}

	response, err := enums.provider.Call(ctx, functionCall, blockID)
	if err != nil {
		return MixedEnum{}, err
	}

	// TODO: Deserialize response to proper type
	if len(response) == 0 {
		return MixedEnum{}, fmt.Errorf("empty response")
	}
	// For now, return zero value - proper deserialization needed
	var result MixedEnum
	_ = response // TODO: deserialize response into result
	return result, nil
}

