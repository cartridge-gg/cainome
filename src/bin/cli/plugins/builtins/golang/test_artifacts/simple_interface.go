// Code generated by Cainome. DO NOT EDIT.
// Generated from ABI file.

package abigen

import (
	"context"
	"fmt"
	"github.com/NethermindEth/juno/core/felt"
	"github.com/NethermindEth/starknet.go/rpc"
	"github.com/cartridge-gg/cainome"
	"github.com/NethermindEth/starknet.go/utils"
)

// SimpleInterfaceEvent represents a contract event
type SimpleInterfaceEvent interface {
	IsSimpleInterfaceEvent() bool
}


type SimpleInterface struct {
	contractAddress *felt.Felt
	provider *rpc.Provider
}

func NewSimpleInterface(contractAddress *felt.Felt, provider *rpc.Provider) *SimpleInterface {
	return &SimpleInterface {
		contractAddress: contractAddress,
		provider: provider,
	}
}

func (simple_interface *SimpleInterface) GetValue(ctx context.Context, opts *cainome.CallOpts) (*felt.Felt, error) {
	// Setup call options
	if opts == nil {
		opts = &cainome.CallOpts{}
	}
	var blockID rpc.BlockID
	if opts.BlockID != nil {
		blockID = *opts.BlockID
	} else {
		blockID = rpc.BlockID{Tag: "latest"}
	}

	// No parameters required
	calldata := []*felt.Felt{}

	// Make the contract call
	functionCall := rpc.FunctionCall{
		ContractAddress:    simple_interface.contractAddress,
		EntryPointSelector: utils.GetSelectorFromNameFelt("get_value"),
		Calldata:           calldata,
	}

	response, err := simple_interface.provider.Call(ctx, functionCall, blockID)
	if err != nil {
		return nil, err
	}

	// Deserialize response to proper type
	if len(response) == 0 {
		return nil, fmt.Errorf("empty response")
	}
	return response[0], nil
}

func (simple_interface *SimpleInterface) SetValue(ctx context.Context, value *felt.Felt) error {
	// Serialize parameters to calldata
	calldata := []*felt.Felt{}
	calldata = append(calldata, value)

	// TODO: Implement invoke transaction
	// This requires account/signer setup for transaction submission
	_ = calldata
	return fmt.Errorf("invoke methods require account setup - not yet implemented")
}

