// Code generated by Cainome. DO NOT EDIT.
// Generated from ABI file.

package abigen

import (
	"context"
	"fmt"
	"github.com/NethermindEth/juno/core/felt"
	"github.com/NethermindEth/starknet.go/account"
	"github.com/NethermindEth/starknet.go/rpc"
	"github.com/NethermindEth/starknet.go/utils"
	"github.com/cartridge-gg/cainome"
)

// SimpleInterfaceSimpleInterfaceEvent represents a contract event
type SimpleInterfaceSimpleInterfaceEvent interface {
	IsSimpleInterfaceSimpleInterfaceEvent() bool
}


type SimpleInterfaceContract struct {
	contractAddress *felt.Felt
}

func NewSimpleInterfaceContract(contractAddress *felt.Felt) *SimpleInterfaceContract {
	return &SimpleInterfaceContract {
		contractAddress: contractAddress,
	}
}

type SimpleInterfaceReader struct {
	*SimpleInterfaceContract
	provider rpc.RpcProvider
}

type SimpleInterfaceWriter struct {
	*SimpleInterfaceContract
	account *account.Account
}

type SimpleInterface struct {
	*SimpleInterfaceReader
	*SimpleInterfaceWriter
}

func NewSimpleInterfaceReader(contractAddress *felt.Felt, provider rpc.RpcProvider) *SimpleInterfaceReader {
	return &SimpleInterfaceReader {
		SimpleInterfaceContract: NewSimpleInterfaceContract(contractAddress),
		provider: provider,
	}
}

func NewSimpleInterfaceWriter(contractAddress *felt.Felt, account *account.Account) *SimpleInterfaceWriter {
	return &SimpleInterfaceWriter {
		SimpleInterfaceContract: NewSimpleInterfaceContract(contractAddress),
		account: account,
	}
}

func NewSimpleInterface(contractAddress *felt.Felt, account *account.Account) *SimpleInterface {
	return &SimpleInterface {
		SimpleInterfaceReader: NewSimpleInterfaceReader(contractAddress, account.Provider),
		SimpleInterfaceWriter: NewSimpleInterfaceWriter(contractAddress, account),
	}
}

type SimpleInterfaceGetValueResponse struct {
	Value *felt.Felt `json:"value"`
}

func NewSimpleInterfaceGetValueResponse(value *felt.Felt) *SimpleInterfaceGetValueResponse {
	return &SimpleInterfaceGetValueResponse {
		Value: value,
	}
}

// MarshalCairo serializes SimpleInterfaceGetValueResponse to Cairo felt array
func (s *SimpleInterfaceGetValueResponse) MarshalCairo() ([]*felt.Felt, error) {
	var result []*felt.Felt

	result = append(result, s.Value)

	return result, nil
}

// UnmarshalCairo deserializes SimpleInterfaceGetValueResponse from Cairo felt array
func (s *SimpleInterfaceGetValueResponse) UnmarshalCairo(data []*felt.Felt) error {
	offset := 0

	if offset >= len(data) {
		return fmt.Errorf("insufficient data for field Value")
	}
	s.Value = data[offset]
	offset++


	return nil
}

// CairoSize returns the serialized size for SimpleInterfaceGetValueResponse
func (s *SimpleInterfaceGetValueResponse) CairoSize() int {
	return -1 // Dynamic size
}

type SimpleInterfaceSetValueInput struct {
	Value *felt.Felt `json:"value"`
}

func NewSimpleInterfaceSetValueInput(value *felt.Felt) *SimpleInterfaceSetValueInput {
	return &SimpleInterfaceSetValueInput {
		Value: value,
	}
}

// MarshalCairo serializes SimpleInterfaceSetValueInput to Cairo felt array
func (s *SimpleInterfaceSetValueInput) MarshalCairo() ([]*felt.Felt, error) {
	var result []*felt.Felt

	result = append(result, s.Value)

	return result, nil
}

// UnmarshalCairo deserializes SimpleInterfaceSetValueInput from Cairo felt array
func (s *SimpleInterfaceSetValueInput) UnmarshalCairo(data []*felt.Felt) error {
	offset := 0

	if offset >= len(data) {
		return fmt.Errorf("insufficient data for field Value")
	}
	s.Value = data[offset]
	offset++


	return nil
}

// CairoSize returns the serialized size for SimpleInterfaceSetValueInput
func (s *SimpleInterfaceSetValueInput) CairoSize() int {
	return -1 // Dynamic size
}

type SimpleInterfaceSetValueResponse struct {
	// This function has no return values
}

func NewSimpleInterfaceSetValueResponse() *SimpleInterfaceSetValueResponse {
	return &SimpleInterfaceSetValueResponse{}
}

// MarshalCairo serializes SimpleInterfaceSetValueResponse to Cairo felt array
func (s *SimpleInterfaceSetValueResponse) MarshalCairo() ([]*felt.Felt, error) {
	var result []*felt.Felt


	return result, nil
}

// UnmarshalCairo deserializes SimpleInterfaceSetValueResponse from Cairo felt array
func (s *SimpleInterfaceSetValueResponse) UnmarshalCairo(data []*felt.Felt) error {

	return nil
}

// CairoSize returns the serialized size for SimpleInterfaceSetValueResponse
func (s *SimpleInterfaceSetValueResponse) CairoSize() int {
	return -1 // Dynamic size
}

func (simple_interface_contract *SimpleInterfaceContract) GetValue() (rpc.FunctionCall, error) {
	// Serialize input to calldata
	calldata := []*felt.Felt{}

	return rpc.FunctionCall{
		ContractAddress:    simple_interface_contract.contractAddress,
		EntryPointSelector: utils.GetSelectorFromNameFelt("get_value"),
		Calldata:           calldata,
	}, nil
}

func (simple_interface_contract *SimpleInterfaceContract) GetValueLegacy() (rpc.FunctionCall, error) {
	// Serialize parameters to calldata
	calldata := []*felt.Felt{}

	return rpc.FunctionCall{
		ContractAddress:    simple_interface_contract.contractAddress,
		EntryPointSelector: utils.GetSelectorFromNameFelt("get_value"),
		Calldata:           calldata,
	}, nil
}

func (simple_interface_contract *SimpleInterfaceContract) SetValue(input *SimpleInterfaceSetValueInput) (rpc.FunctionCall, error) {
	// Serialize input to calldata
	calldata, err := input.MarshalCairo()
	if err != nil {
		return rpc.FunctionCall{}, err
	}

	return rpc.FunctionCall{
		ContractAddress:    simple_interface_contract.contractAddress,
		EntryPointSelector: utils.GetSelectorFromNameFelt("set_value"),
		Calldata:           calldata,
	}, nil
}

func (simple_interface_contract *SimpleInterfaceContract) SetValueLegacy(value *felt.Felt) (rpc.FunctionCall, error) {
	// Serialize parameters to calldata
	calldata := []*felt.Felt{}
	calldata = append(calldata, value)

	return rpc.FunctionCall{
		ContractAddress:    simple_interface_contract.contractAddress,
		EntryPointSelector: utils.GetSelectorFromNameFelt("set_value"),
		Calldata:           calldata,
	}, nil
}

func (simple_interface_reader *SimpleInterfaceReader) GetValue(ctx context.Context, opts *cainome.CallOpts) (*felt.Felt, error) {
	// Setup call options
	if opts == nil {
		opts = &cainome.CallOpts{}
	}
	var blockID rpc.BlockID
	if opts.BlockID != nil {
		blockID = *opts.BlockID
	} else {
		blockID = rpc.BlockID{Tag: "latest"}
	}

	// No parameters required
	calldata := []*felt.Felt{}

	// Make the contract call
	functionCall := rpc.FunctionCall{
		ContractAddress:    simple_interface_reader.contractAddress,
		EntryPointSelector: utils.GetSelectorFromNameFelt("get_value"),
		Calldata:           calldata,
	}

	response, err := simple_interface_reader.provider.Call(ctx, functionCall, blockID)
	if err != nil {
		return nil, err
	}

	// Deserialize response to proper type
	if len(response) == 0 {
		return nil, fmt.Errorf("empty response")
	}
	result := response[0]
	return result, nil
}

func (simple_interface_writer *SimpleInterfaceWriter) SetValue(ctx context.Context, value *felt.Felt, opts *cainome.InvokeOpts) (*felt.Felt, error) {
	// Setup invoke options
	if opts == nil {
		opts = &cainome.InvokeOpts{}
	}

	// Serialize parameters to calldata
	calldata := []*felt.Felt{}
	calldata = append(calldata, value)

	// Build and send invoke transaction using cainome helper
	txHash, err := cainome.BuildAndSendInvokeTxn(ctx, simple_interface_writer.account, simple_interface_writer.contractAddress, utils.GetSelectorFromNameFelt("set_value"), calldata, opts)
	if err != nil {
		return nil, fmt.Errorf("failed to submit invoke transaction: %w", err)
	}

	return txHash, nil
}

