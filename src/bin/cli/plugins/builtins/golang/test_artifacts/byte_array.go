// Code generated by Cainome. DO NOT EDIT.
// Generated from ABI file.

package abigen

import (
	"context"
	"fmt"
	"github.com/NethermindEth/juno/core/felt"
	"github.com/NethermindEth/starknet.go/rpc"
	"github.com/cartridge-gg/cainome"
	"github.com/NethermindEth/starknet.go/utils"
)

// ByteArrayEvent represents a contract event
type ByteArrayEvent interface {
	IsByteArrayEvent() bool
}


type ByteArray struct {
	contractAddress *felt.Felt
	provider *rpc.Provider
}

func NewByteArray(contractAddress *felt.Felt, provider *rpc.Provider) *ByteArray {
	return &ByteArray {
		contractAddress: contractAddress,
		provider: provider,
	}
}

func (byte_array *ByteArray) GetByteArray(ctx context.Context, opts *cainome.CallOpts) ([]byte, error) {
	// Setup call options
	if opts == nil {
		opts = &cainome.CallOpts{}
	}
	var blockID rpc.BlockID
	if opts.BlockID != nil {
		blockID = *opts.BlockID
	} else {
		blockID = rpc.BlockID{Tag: "latest"}
	}

	// No parameters required
	calldata := []*felt.Felt{}

	// Make the contract call
	functionCall := rpc.FunctionCall{
		ContractAddress:    byte_array.contractAddress,
		EntryPointSelector: utils.GetSelectorFromNameFelt("get_byte_array"),
		Calldata:           calldata,
	}

	response, err := byte_array.provider.Call(ctx, functionCall, blockID)
	if err != nil {
		return nil, err
	}

	// Deserialize response to proper type
	if len(response) == 0 {
		return nil, fmt.Errorf("empty response")
	}
	var result []byte
	// TODO: Convert felt to Composite(Composite { type_path: "core::byte_array::ByteArray", inners: [CompositeInner { index: 0, name: "data", kind: NotUsed, token: Array(Array { type_path: "core::array::Array::<core::bytes_31::bytes31>", inner: CoreBasic(CoreBasic { type_path: "core::bytes_31::bytes31" }), is_legacy: false }) }, CompositeInner { index: 1, name: "pending_word", kind: NotUsed, token: CoreBasic(CoreBasic { type_path: "core::felt252" }) }, CompositeInner { index: 2, name: "pending_word_len", kind: NotUsed, token: CoreBasic(CoreBasic { type_path: "core::integer::u32" }) }], generic_args: [], type: Struct, is_event: false, alias: None })
	_ = response
	return result, nil
}

func (byte_array *ByteArray) GetByteArrayStorage(ctx context.Context, opts *cainome.CallOpts) ([]byte, error) {
	// Setup call options
	if opts == nil {
		opts = &cainome.CallOpts{}
	}
	var blockID rpc.BlockID
	if opts.BlockID != nil {
		blockID = *opts.BlockID
	} else {
		blockID = rpc.BlockID{Tag: "latest"}
	}

	// No parameters required
	calldata := []*felt.Felt{}

	// Make the contract call
	functionCall := rpc.FunctionCall{
		ContractAddress:    byte_array.contractAddress,
		EntryPointSelector: utils.GetSelectorFromNameFelt("get_byte_array_storage"),
		Calldata:           calldata,
	}

	response, err := byte_array.provider.Call(ctx, functionCall, blockID)
	if err != nil {
		return nil, err
	}

	// Deserialize response to proper type
	if len(response) == 0 {
		return nil, fmt.Errorf("empty response")
	}
	var result []byte
	// TODO: Convert felt to Composite(Composite { type_path: "core::byte_array::ByteArray", inners: [CompositeInner { index: 0, name: "data", kind: NotUsed, token: Array(Array { type_path: "core::array::Array::<core::bytes_31::bytes31>", inner: CoreBasic(CoreBasic { type_path: "core::bytes_31::bytes31" }), is_legacy: false }) }, CompositeInner { index: 1, name: "pending_word", kind: NotUsed, token: CoreBasic(CoreBasic { type_path: "core::felt252" }) }, CompositeInner { index: 2, name: "pending_word_len", kind: NotUsed, token: CoreBasic(CoreBasic { type_path: "core::integer::u32" }) }], generic_args: [], type: Struct, is_event: false, alias: None })
	_ = response
	return result, nil
}

func (byte_array *ByteArray) SetByteArray(ctx context.Context, v []byte) error {
	// Serialize parameters to calldata
	calldata := []*felt.Felt{}
	if v_data, err := cainome.NewCairoByteArray(v).MarshalCairo(); err != nil {
		return fmt.Errorf("failed to marshal v: %w", err)
	} else {
		calldata = append(calldata, v_data...)
	}

	// TODO: Implement invoke transaction
	// This requires account/signer setup for transaction submission
	_ = calldata
	return fmt.Errorf("invoke methods require account setup - not yet implemented")
}

