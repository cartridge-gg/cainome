// Code generated by Cainome. DO NOT EDIT.
// Generated from ABI file.

package abigen

import (
	"context"
	"fmt"
	"github.com/NethermindEth/juno/core/felt"
	"github.com/NethermindEth/starknet.go/rpc"
	"github.com/NethermindEth/starknet.go/utils"
)

type MyStructBuiltins struct {
	A *felt.Felt `json:"a"`
}

// MarshalCairo serializes MyStructBuiltins to Cairo felt array
func (s *MyStructBuiltins) MarshalCairo() ([]*felt.Felt, error) {
	var result []*felt.Felt

	// TODO: Handle unknown token type for field A
	return result, nil
}

// UnmarshalCairo deserializes MyStructBuiltins from Cairo felt array
func (s *MyStructBuiltins) UnmarshalCairo(data []*felt.Felt) error {
	offset := 0

	// TODO: Handle unknown token type for field A unmarshal
	_ = offset // Suppress unused variable warning
	return nil
}

// CairoSize returns the serialized size for MyStructBuiltins
func (s *MyStructBuiltins) CairoSize() int {
	return -1 // Dynamic size
}


// BuiltinsEvent represents a contract event
type BuiltinsEvent interface {
	IsBuiltinsEvent() bool
}


type Builtins struct {
	contractAddress *felt.Felt
	provider *rpc.Provider
}

func NewBuiltins(contractAddress *felt.Felt, provider *rpc.Provider) *Builtins {
	return &Builtins {
		contractAddress: contractAddress,
		provider: provider,
	}
}

func (builtins *Builtins) StructNonZero(ctx context.Context, res *MyStructBuiltins, opts *CallOpts) (*felt.Felt, error) {
	// Setup call options
	if opts == nil {
		opts = &CallOpts{}
	}
	var blockID rpc.BlockID
	if opts.BlockID != nil {
		blockID = *opts.BlockID
	} else {
		blockID = rpc.BlockID{Tag: "latest"}
	}

	// Serialize parameters to calldata
	calldata := []*felt.Felt{}
	// TODO: Serialize complex type res using MarshalCairo()
	// if res_data, err := res.MarshalCairo(); err != nil {
	//     return nil, fmt.Errorf("failed to marshal res: %w", err)
	// } else {
	//     calldata = append(calldata, res_data...)
	// }
	_ = res // TODO: implement MarshalCairo and add to calldata

	// Make the contract call
	functionCall := rpc.FunctionCall{
		ContractAddress:    builtins.contractAddress,
		EntryPointSelector: utils.GetSelectorFromNameFelt("struct_non_zero"),
		Calldata:           calldata,
	}

	response, err := builtins.provider.Call(ctx, functionCall, blockID)
	if err != nil {
		return nil, err
	}

	// Deserialize response to proper type
	if len(response) == 0 {
		return nil, fmt.Errorf("empty response")
	}
	return response[0], nil
}

func (builtins *Builtins) NonZero(ctx context.Context, res *felt.Felt, opts *CallOpts) (*felt.Felt, error) {
	// Setup call options
	if opts == nil {
		opts = &CallOpts{}
	}
	var blockID rpc.BlockID
	if opts.BlockID != nil {
		blockID = *opts.BlockID
	} else {
		blockID = rpc.BlockID{Tag: "latest"}
	}

	// Serialize parameters to calldata
	calldata := []*felt.Felt{}
	// TODO: Serialize basic type res to felt
	_ = res // TODO: add to calldata

	// Make the contract call
	functionCall := rpc.FunctionCall{
		ContractAddress:    builtins.contractAddress,
		EntryPointSelector: utils.GetSelectorFromNameFelt("non_zero"),
		Calldata:           calldata,
	}

	response, err := builtins.provider.Call(ctx, functionCall, blockID)
	if err != nil {
		return nil, err
	}

	// Deserialize response to proper type
	if len(response) == 0 {
		return nil, fmt.Errorf("empty response")
	}
	return response[0], nil
}

