// Code generated by Cainome. DO NOT EDIT.
// Generated from ABI file.

package abigen

import (
	"context"
	"fmt"
	"github.com/NethermindEth/juno/core/felt"
	"github.com/NethermindEth/starknet.go/account"
	"github.com/NethermindEth/starknet.go/rpc"
	"github.com/NethermindEth/starknet.go/utils"
	"github.com/cartridge-gg/cainome"
)

type ConflictingEventsEventOnlyKey struct {
	Value *felt.Felt `json:"value"`
}

// MarshalCairo serializes ConflictingEventsEventOnlyKey to Cairo felt array
func (s *ConflictingEventsEventOnlyKey) MarshalCairo() ([]*felt.Felt, error) {
	var result []*felt.Felt

	result = append(result, s.Value)
	return result, nil
}

// UnmarshalCairo deserializes ConflictingEventsEventOnlyKey from Cairo felt array
func (s *ConflictingEventsEventOnlyKey) UnmarshalCairo(data []*felt.Felt) error {
	offset := 0

	if offset >= len(data) {
		return fmt.Errorf("insufficient data for field Value")
	}
	s.Value = data[offset]
	offset++

	return nil
}

// CairoSize returns the serialized size for ConflictingEventsEventOnlyKey
func (s *ConflictingEventsEventOnlyKey) CairoSize() int {
	return -1 // Dynamic size
}

// IsConflictingEventsEvent implements the ConflictingEventsEvent interface
func (e ConflictingEventsEventOnlyKey) IsConflictingEventsEvent() bool {
	return true
}


// ConflictingEventsEvent represents a contract event
type ConflictingEventsEvent interface {
	IsConflictingEventsEvent() bool
}

const (
	ConflictingEventsEvent_EventOnlyKey = "EventOnlyKey"
)


type ConflictingEventsReader struct {
	contractAddress *felt.Felt
	provider rpc.RpcProvider
}

type ConflictingEventsWriter struct {
	contractAddress *felt.Felt
	account *account.Account
}

type ConflictingEvents struct {
	*ConflictingEventsReader
	*ConflictingEventsWriter
}

func NewConflictingEventsReader(contractAddress *felt.Felt, provider rpc.RpcProvider) *ConflictingEventsReader {
	return &ConflictingEventsReader {
		contractAddress: contractAddress,
		provider: provider,
	}
}

func NewConflictingEventsWriter(contractAddress *felt.Felt, account *account.Account) *ConflictingEventsWriter {
	return &ConflictingEventsWriter {
		contractAddress: contractAddress,
		account: account,
	}
}

func NewConflictingEvents(contractAddress *felt.Felt, account *account.Account) *ConflictingEvents {
	return &ConflictingEvents {
		ConflictingEventsReader: NewConflictingEventsReader(contractAddress, account.Provider),
		ConflictingEventsWriter: NewConflictingEventsWriter(contractAddress, account),
	}
}

func (conflicting_events_writer *ConflictingEventsWriter) EmitSuper(ctx context.Context, opts *cainome.InvokeOpts) (*felt.Felt, error) {
	// Setup invoke options
	if opts == nil {
		opts = &cainome.InvokeOpts{}
	}

	// No parameters required
	calldata := []*felt.Felt{}

	// Build and send invoke transaction using cainome helper
	txHash, err := cainome.BuildAndSendInvokeTxn(ctx, conflicting_events_writer.account, conflicting_events_writer.contractAddress, utils.GetSelectorFromNameFelt("emit_super"), calldata, opts)
	if err != nil {
		return nil, fmt.Errorf("failed to submit invoke transaction: %w", err)
	}

	return txHash, nil
}

