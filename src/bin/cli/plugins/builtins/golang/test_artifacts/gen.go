// Code generated by Cainome. DO NOT EDIT.
// Generated from ABI file.

package abigen

import (
	"math/big"
	"github.com/NethermindEth/juno/core/felt"
)

type GenMyEnum struct {
	Variant string `json:"variant"`
	Value   interface{} `json:"value,omitempty"`
}

const (
	GenMyEnum_One = "One"
	GenMyEnum_Two = "Two"
	GenMyEnum_Three = "Three"
	GenMyEnum_Four = "Four"
	GenMyEnum_Five = "Five"
	GenMyEnum_Six = "Six"
	GenMyEnum_Seven = "Seven"
	GenMyEnum_Eight = "Eight"
	GenMyEnum_Nine = "Nine"
	GenMyEnum_Ten = "Ten"
	GenMyEnum_Eleven = "Eleven"
)

func NewGenMyEnumOne() GenMyEnum {
	return GenMyEnum {
		Variant: "One",
	}
}

func NewGenMyEnumTwo() GenMyEnum {
	return GenMyEnum {
		Variant: "Two",
	}
}

func NewGenMyEnumThree() GenMyEnum {
	return GenMyEnum {
		Variant: "Three",
	}
}

func NewGenMyEnumFour() GenMyEnum {
	return GenMyEnum {
		Variant: "Four",
	}
}

func NewGenMyEnumFive() GenMyEnum {
	return GenMyEnum {
		Variant: "Five",
	}
}

func NewGenMyEnumSix() GenMyEnum {
	return GenMyEnum {
		Variant: "Six",
	}
}

func NewGenMyEnumSeven() GenMyEnum {
	return GenMyEnum {
		Variant: "Seven",
	}
}

func NewGenMyEnumEight() GenMyEnum {
	return GenMyEnum {
		Variant: "Eight",
	}
}

func NewGenMyEnumNine() GenMyEnum {
	return GenMyEnum {
		Variant: "Nine",
	}
}

func NewGenMyEnumTen() GenMyEnum {
	return GenMyEnum {
		Variant: "Ten",
	}
}

func NewGenMyEnumEleven() GenMyEnum {
	return GenMyEnum {
		Variant: "Eleven",
	}
}


type GenMyStructInnerGeneric struct {
	F1 *felt.Felt `json:"f1"`
	F2 GenMyStruct `json:"f2"`
	F3 uint32 `json:"f3"`
}

type GenMyStruct struct {
	F1 *felt.Felt `json:"f1"`
	F2 *felt.Felt `json:"f2"`
	F3 *felt.Felt `json:"f3"`
}

type GenE1 struct {
	Key *felt.Felt `json:"key"`
	Value []*felt.Felt `json:"value"`
}

type GenPlainStruct struct {
	F1 uint8 `json:"f1"`
	F2 uint16 `json:"f2"`
	F3 uint32 `json:"f3"`
	F4 uint64 `json:"f4"`
	F5 *big.Int `json:"f5"`
	F6 *felt.Felt `json:"f6"`
	F7 struct {
	Field0 *felt.Felt
	Field1 uint64
} `json:"f7"`
	F8 []uint8 `json:"f8"`
	F9 []*big.Int `json:"f9"`
}

type GenEvent struct {
	Variant string `json:"variant"`
	Value   interface{} `json:"value,omitempty"`
}

const (
	GenEvent_E1 = "E1"
)


type Gen struct {
	contractAddress *felt.Felt
	provider Provider // Interface for StarkNet provider
}

func NewGen(contractAddress *felt.Felt, provider Provider) *Gen {
	return &Gen {
		contractAddress: contractAddress,
		provider: provider,
	}
}

func (gen *Gen) Func1(a GenMyStruct) error {
	// TODO: Implement Invoke method for Func1
	panic("not implemented")
}

func (gen *Gen) Func2(a GenMyStruct) error {
	// TODO: Implement Invoke method for Func2
	panic("not implemented")
}

func (gen *Gen) Read() (struct {
	Field0 *felt.Felt
	Field1 *felt.Felt
}, error) {
	// TODO: Implement Call method for Read
	panic("not implemented")
}

func (gen *Gen) Func3(a GenPlainStruct) error {
	// TODO: Implement Call method for Func3
	panic("not implemented")
}

func (gen *Gen) Func4(a GenMyEnum) error {
	// TODO: Implement Call method for Func4
	panic("not implemented")
}

func (gen *Gen) Func5(a GenMyStructInnerGeneric) error {
	// TODO: Implement Invoke method for Func5
	panic("not implemented")
}

