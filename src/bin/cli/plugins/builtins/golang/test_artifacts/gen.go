// Code generated by Cainome. DO NOT EDIT.
// Generated from ABI file.

package abigen

import (
	"math/big"
	"github.com/NethermindEth/juno/core/felt"
	"github.com/NethermindEth/starknet.go/rpc"
)

// GenEvent represents a contract event
type GenEvent interface {
	IsGenEvent() bool
}

const (
	GenEvent_E1 = "E1"
)


type MyStructGen struct {
	F1 *felt.Felt `json:"f1"`
	F2 *felt.Felt `json:"f2"`
	F3 *felt.Felt `json:"f3"`
}

type MyStructInnerGeneric struct {
	F1 *felt.Felt `json:"f1"`
	F2 MyStructGen `json:"f2"`
	F3 uint32 `json:"f3"`
}

type PlainStruct struct {
	F1 uint8 `json:"f1"`
	F2 uint16 `json:"f2"`
	F3 uint32 `json:"f3"`
	F4 uint64 `json:"f4"`
	F5 *big.Int `json:"f5"`
	F6 *felt.Felt `json:"f6"`
	F7 struct {
	Field0 *felt.Felt
	Field1 uint64
} `json:"f7"`
	F8 []uint8 `json:"f8"`
	F9 []*big.Int `json:"f9"`
}

type E1 struct {
	Key *felt.Felt `json:"key"`
	Value []*felt.Felt `json:"value"`
}
// IsGenEvent implements the GenEvent interface
func (e E1) IsGenEvent() bool {
	return true
}


type MyEnum struct {
	Variant string `json:"variant"`
	Value   interface{} `json:"value,omitempty"`
}

const (
	MyEnum_One = "One"
	MyEnum_Two = "Two"
	MyEnum_Three = "Three"
	MyEnum_Four = "Four"
	MyEnum_Five = "Five"
	MyEnum_Six = "Six"
	MyEnum_Seven = "Seven"
	MyEnum_Eight = "Eight"
	MyEnum_Nine = "Nine"
	MyEnum_Ten = "Ten"
	MyEnum_Eleven = "Eleven"
)

func NewMyEnumOne() MyEnum {
	return MyEnum {
		Variant: "One",
	}
}

func NewMyEnumTwo() MyEnum {
	return MyEnum {
		Variant: "Two",
	}
}

func NewMyEnumThree() MyEnum {
	return MyEnum {
		Variant: "Three",
	}
}

func NewMyEnumFour() MyEnum {
	return MyEnum {
		Variant: "Four",
	}
}

func NewMyEnumFive() MyEnum {
	return MyEnum {
		Variant: "Five",
	}
}

func NewMyEnumSix() MyEnum {
	return MyEnum {
		Variant: "Six",
	}
}

func NewMyEnumSeven() MyEnum {
	return MyEnum {
		Variant: "Seven",
	}
}

func NewMyEnumEight() MyEnum {
	return MyEnum {
		Variant: "Eight",
	}
}

func NewMyEnumNine() MyEnum {
	return MyEnum {
		Variant: "Nine",
	}
}

func NewMyEnumTen() MyEnum {
	return MyEnum {
		Variant: "Ten",
	}
}

func NewMyEnumEleven() MyEnum {
	return MyEnum {
		Variant: "Eleven",
	}
}


type Gen struct {
	contractAddress *felt.Felt
	provider *rpc.Provider
}

func NewGen(contractAddress *felt.Felt, provider *rpc.Provider) *Gen {
	return &Gen {
		contractAddress: contractAddress,
		provider: provider,
	}
}

func (gen *Gen) Func1(a MyStructGen) error {
	// TODO: Implement Invoke method for Func1
	panic("not implemented")
}

func (gen *Gen) Func2(a MyStructGen) error {
	// TODO: Implement Invoke method for Func2
	panic("not implemented")
}

func (gen *Gen) Read() (struct {
	Field0 *felt.Felt
	Field1 *felt.Felt
}, error) {
	// TODO: Implement Call method for Read
	panic("not implemented")
}

func (gen *Gen) Func3(a PlainStruct) error {
	// TODO: Implement Call method for Func3
	panic("not implemented")
}

func (gen *Gen) Func4(a MyEnum) error {
	// TODO: Implement Call method for Func4
	panic("not implemented")
}

func (gen *Gen) Func5(a MyStructInnerGeneric) error {
	// TODO: Implement Invoke method for Func5
	panic("not implemented")
}

