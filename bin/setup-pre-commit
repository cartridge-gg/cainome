#!/bin/bash
#
# Setup script for pre-commit hooks
# This script installs and configures Git pre-commit hooks for linting and formatting
# Rust and Cairo files based on the current diff.
#
set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}🔧 Setting up pre-commit hooks...${NC}"

# Move to repo root
pushd $(dirname "$0")/.. > /dev/null

# Check if we're in a Git repository
if [ ! -d ".git" ]; then
    echo -e "${RED}❌ Error: Not in a Git repository${NC}"
    exit 1
fi

# Make sure all our scripts are executable
echo -e "${BLUE}Making scripts executable...${NC}"
chmod +x bin/pre-commit-rust-lint
chmod +x bin/pre-commit-rust-format
chmod +x bin/pre-commit-cairo-format
chmod +x bin/pre-commit-prettier-format

# Create the main Git pre-commit hook
echo -e "${BLUE}Installing Git pre-commit hook...${NC}"
cat > .git/hooks/pre-commit << 'EOF'
#!/bin/bash

# Pre-commit hook that conditionally runs linting/formatting based on changed files
# Mirrors the logic from .github/workflows/lint.yml

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}Running pre-commit checks...${NC}"

# Get list of staged files
STAGED_FILES=$(git diff --cached --name-only)

if [[ -z "$STAGED_FILES" ]]; then
    echo -e "${YELLOW}No staged files found. Skipping pre-commit checks.${NC}"
    exit 0
fi

echo "Staged files:"
echo "$STAGED_FILES" | sed 's/^/  /'
echo

# Track which jobs need to run
RUN_RUST_LINT=false
RUN_RUST_FORMAT=false
RUN_CAIRO_FORMAT=false
RUN_PRETTIER=false

# Check for Rust files
if echo "$STAGED_FILES" | grep -qE '\.(rs)$|^Cargo\.(toml|lock)$|^rust-toolchain\.toml$'; then
    RUN_RUST_LINT=true
    RUN_RUST_FORMAT=true
fi

# Check for Cairo files
if echo "$STAGED_FILES" | grep -qE '^contracts/.*\.cairo$|^contracts/Scarb\.(toml|lock)$'; then
    RUN_CAIRO_FORMAT=true
fi

# Check for Markdown/YAML files
if echo "$STAGED_FILES" | grep -qE '\.(md|yaml|yml)$' | grep -v "CLAUDE\.md"; then
    RUN_PRETTIER=true
fi

# Track errors
ERRORS=0

# Get staged Rust files
STAGED_RUST_FILES=()
if [[ "$RUN_RUST_FORMAT" == "true" || "$RUN_RUST_LINT" == "true" ]]; then
    while IFS= read -r -d '' file; do
        if [[ "$file" =~ \.rs$ ]]; then
            STAGED_RUST_FILES+=("$file")
        fi
    done < <(echo "$STAGED_FILES" | grep '\.rs$' | tr '\n' '\0' 2>/dev/null || true)
fi

# Get staged Cairo files
STAGED_CAIRO_FILES=()
if [[ "$RUN_CAIRO_FORMAT" == "true" ]]; then
    while IFS= read -r -d '' file; do
        if [[ "$file" =~ ^contracts/.*\.cairo$ ]]; then
            STAGED_CAIRO_FILES+=("$file")
        fi
    done < <(echo "$STAGED_FILES" | grep '^contracts/.*\.cairo$' | tr '\n' '\0' 2>/dev/null || true)
fi

# Get staged Markdown/YAML files
STAGED_PRETTIER_FILES=()
if [[ "$RUN_PRETTIER" == "true" ]]; then
    while IFS= read -r -d '' file; do
        if [[ "$file" =~ \.(md|yaml|yml)$ ]] && [[ ! "$file" =~ CLAUDE\.md ]]; then
            STAGED_PRETTIER_FILES+=("$file")
        fi
    done < <(echo "$STAGED_FILES" | grep -E '\.(md|yaml|yml)$' | grep -v "CLAUDE\.md" | tr '\n' '\0' 2>/dev/null || true)
fi

# Run Rust formatting if needed
if [[ "$RUN_RUST_FORMAT" == "true" && ${#STAGED_RUST_FILES[@]} -gt 0 ]]; then
    echo -e "${BLUE}Running Rust formatting...${NC}"
    if ! bin/pre-commit-rust-format "${STAGED_RUST_FILES[@]}"; then
        echo -e "${RED}Rust formatting failed${NC}"
        ((ERRORS++))
    fi
    echo
fi

# Run Rust linting if needed
if [[ "$RUN_RUST_LINT" == "true" && ${#STAGED_RUST_FILES[@]} -gt 0 ]]; then
    echo -e "${BLUE}Running Rust linting...${NC}"
    if ! bin/pre-commit-rust-lint "${STAGED_RUST_FILES[@]}"; then
        echo -e "${RED}Rust linting failed${NC}"
        ((ERRORS++))
    fi
    echo
fi

# Run Cairo formatting if needed
if [[ "$RUN_CAIRO_FORMAT" == "true" && ${#STAGED_CAIRO_FILES[@]} -gt 0 ]]; then
    echo -e "${BLUE}Running Cairo formatting...${NC}"
    if ! bin/pre-commit-cairo-format "${STAGED_CAIRO_FILES[@]}"; then
        echo -e "${RED}Cairo formatting failed${NC}"
        ((ERRORS++))
    fi
    echo
fi

# Run Prettier formatting if needed
if [[ "$RUN_PRETTIER" == "true" && ${#STAGED_PRETTIER_FILES[@]} -gt 0 ]]; then
    echo -e "${BLUE}Running Prettier formatting...${NC}"
    if ! bin/pre-commit-prettier-format "${STAGED_PRETTIER_FILES[@]}"; then
        echo -e "${RED}Prettier formatting failed${NC}"
        ((ERRORS++))
    fi
    echo
fi

# Summary
if [[ $ERRORS -eq 0 ]]; then
    echo -e "${GREEN}✓ All pre-commit checks passed!${NC}"
    exit 0
else
    echo -e "${RED}✗ Pre-commit checks failed with $ERRORS error(s)${NC}"
    echo -e "${YELLOW}Fix the issues above and try committing again.${NC}"
    exit 1
fi
EOF

chmod +x .git/hooks/pre-commit

# Check if required tools are available
echo -e "${BLUE}Checking required tools...${NC}"

# Check for Rust tools
if ! command -v cargo >/dev/null 2>&1; then
    echo -e "${YELLOW}⚠️  Warning: Cargo not found. Rust linting will not work.${NC}"
else
    echo -e "${GREEN}✓ Cargo found${NC}"
    
    # Check for rustfmt
    if ! cargo fmt --version >/dev/null 2>&1; then
        echo -e "${YELLOW}⚠️  Warning: rustfmt not found. Installing...${NC}"
        rustup component add rustfmt
    else
        echo -e "${GREEN}✓ rustfmt found${NC}"
    fi
    
    # Check for clippy
    if ! cargo clippy --version >/dev/null 2>&1; then
        echo -e "${YELLOW}⚠️  Warning: clippy not found. Installing...${NC}"
        rustup component add clippy
    else
        echo -e "${GREEN}✓ clippy found${NC}"
    fi
fi

# Check for Scarb (Cairo)
if ! command -v scarb >/dev/null 2>&1; then
    echo -e "${YELLOW}⚠️  Warning: scarb not found. Cairo formatting will not work.${NC}"
    echo -e "${YELLOW}    Install from: https://docs.swmansion.com/scarb/${NC}"
else
    echo -e "${GREEN}✓ scarb found${NC}"
fi

# Check for prettier
if ! command -v prettier >/dev/null 2>&1; then
    echo -e "${YELLOW}⚠️  Warning: prettier not found. Markdown/YAML formatting will not work.${NC}"
    echo -e "${YELLOW}    Install with: npm install -g prettier or yarn global add prettier${NC}"
else
    echo -e "${GREEN}✓ prettier found${NC}"
fi

# Test the hooks
echo -e "\n${BLUE}Testing pre-commit hooks...${NC}"

# Create a simple test by checking if the hook script exists and is executable
if [ -x ".git/hooks/pre-commit" ]; then
    echo -e "${GREEN}✓ Pre-commit hook is installed and executable${NC}"
else
    echo -e "${RED}❌ Pre-commit hook is not properly installed${NC}"
    exit 1
fi

echo -e "\n${GREEN}✅ Pre-commit hooks setup completed successfully!${NC}"
echo -e "\n${BLUE}ℹ️  How it works:${NC}"
echo "• The pre-commit hook will automatically run when you commit changes"
echo "• Only files in your current commit (staged files) will be checked"
echo "• Rust files will be formatted with cargo fmt and linted with cargo clippy"
echo "• Cairo files will be formatted with scarb fmt"
echo "• Markdown/YAML files will be formatted with prettier"
echo "• If any issues are found, the commit will be blocked until they're fixed"
echo ""
echo -e "${BLUE}ℹ️  To skip the hooks temporarily (not recommended):${NC}"
echo "  git commit --no-verify"
echo ""
echo -e "${BLUE}ℹ️  To manually run the hooks on staged files:${NC}"
echo "  .git/hooks/pre-commit"

popd > /dev/null 