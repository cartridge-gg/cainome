#!/bin/bash

# Pre-commit hook that conditionally runs linting/formatting based on changed files
# Mirrors the logic from .github/workflows/lint.yml

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}Running pre-commit checks...${NC}"

# Get list of staged files
STAGED_FILES=$(git diff --cached --name-only)

if [[ -z "$STAGED_FILES" ]]; then
    echo -e "${YELLOW}No staged files found. Skipping pre-commit checks.${NC}"
    exit 0
fi

echo "Staged files:"
echo "$STAGED_FILES" | sed 's/^/  /'
echo

# Track which jobs need to run
RUN_RUST_LINT=false
RUN_RUST_FORMAT=false
RUN_CAIRO_FORMAT=false
RUN_PRETTIER=false

# Check for Rust files
if echo "$STAGED_FILES" | grep -qE '\.(rs)$|^Cargo\.(toml|lock)$|^rust-toolchain\.toml$'; then
    RUN_RUST_LINT=true
    RUN_RUST_FORMAT=true
fi

# Check for Cairo files
if echo "$STAGED_FILES" | grep -qE '^contracts/.*\.cairo$|^contracts/Scarb\.(toml|lock)$'; then
    RUN_CAIRO_FORMAT=true
fi

# Check for Markdown/YAML files
if echo "$STAGED_FILES" | grep -qE '\.(md|yaml|yml)$' | grep -v "CLAUDE\.md"; then
    RUN_PRETTIER=true
fi

# Track errors
ERRORS=0

# Get staged Rust files
STAGED_RUST_FILES=()
if [[ "$RUN_RUST_FORMAT" == "true" || "$RUN_RUST_LINT" == "true" ]]; then
    while IFS= read -r -d '' file; do
        if [[ "$file" =~ \.rs$ ]]; then
            STAGED_RUST_FILES+=("$file")
        fi
    done < <(echo "$STAGED_FILES" | grep '\.rs$' | tr '\n' '\0' 2>/dev/null || true)
fi

# Get staged Cairo files
STAGED_CAIRO_FILES=()
if [[ "$RUN_CAIRO_FORMAT" == "true" ]]; then
    while IFS= read -r -d '' file; do
        if [[ "$file" =~ ^contracts/.*\.cairo$ ]]; then
            STAGED_CAIRO_FILES+=("$file")
        fi
    done < <(echo "$STAGED_FILES" | grep '^contracts/.*\.cairo$' | tr '\n' '\0' 2>/dev/null || true)
fi

# Get staged Markdown/YAML files
STAGED_PRETTIER_FILES=()
if [[ "$RUN_PRETTIER" == "true" ]]; then
    while IFS= read -r -d '' file; do
        if [[ "$file" =~ \.(md|yaml|yml)$ ]] && [[ ! "$file" =~ CLAUDE\.md ]]; then
            STAGED_PRETTIER_FILES+=("$file")
        fi
    done < <(echo "$STAGED_FILES" | grep -E '\.(md|yaml|yml)$' | grep -v "CLAUDE\.md" | tr '\n' '\0' 2>/dev/null || true)
fi

# Run Rust formatting if needed
if [[ "$RUN_RUST_FORMAT" == "true" && ${#STAGED_RUST_FILES[@]} -gt 0 ]]; then
    echo -e "${BLUE}Running Rust formatting...${NC}"
    if ! bin/pre-commit-rust-format "${STAGED_RUST_FILES[@]}"; then
        echo -e "${RED}Rust formatting failed${NC}"
        ((ERRORS++))
    fi
    echo
fi

# Run Rust linting if needed
if [[ "$RUN_RUST_LINT" == "true" && ${#STAGED_RUST_FILES[@]} -gt 0 ]]; then
    echo -e "${BLUE}Running Rust linting...${NC}"
    if ! bin/pre-commit-rust-lint "${STAGED_RUST_FILES[@]}"; then
        echo -e "${RED}Rust linting failed${NC}"
        ((ERRORS++))
    fi
    echo
fi

# Run Cairo formatting if needed
if [[ "$RUN_CAIRO_FORMAT" == "true" && ${#STAGED_CAIRO_FILES[@]} -gt 0 ]]; then
    echo -e "${BLUE}Running Cairo formatting...${NC}"
    if ! bin/pre-commit-cairo-format "${STAGED_CAIRO_FILES[@]}"; then
        echo -e "${RED}Cairo formatting failed${NC}"
        ((ERRORS++))
    fi
    echo
fi

# Run Prettier formatting if needed
if [[ "$RUN_PRETTIER" == "true" && ${#STAGED_PRETTIER_FILES[@]} -gt 0 ]]; then
    echo -e "${BLUE}Running Prettier formatting...${NC}"
    if ! bin/pre-commit-prettier-format "${STAGED_PRETTIER_FILES[@]}"; then
        echo -e "${RED}Prettier formatting failed${NC}"
        ((ERRORS++))
    fi
    echo
fi

# Summary
if [[ $ERRORS -eq 0 ]]; then
    echo -e "${GREEN}✓ All pre-commit checks passed!${NC}"
    exit 0
else
    echo -e "${RED}✗ Pre-commit checks failed with $ERRORS error(s)${NC}"
    echo -e "${YELLOW}Fix the issues above and try committing again.${NC}"
    exit 1
fi
